Log file open, 09/24/19 13:41:11
LogWindows: Failed to load 'aqProf.dll' (GetLastError=126)
LogWindows: File 'aqProf.dll' does not exist
LogWindows: Failed to load 'VtuneApi.dll' (GetLastError=126)
LogWindows: File 'VtuneApi.dll' does not exist
LogWindows: Failed to load 'VtuneApi32e.dll' (GetLastError=126)
LogWindows: File 'VtuneApi32e.dll' does not exist
LogConsoleResponse: Display: Failed to find resolution value strings in scalability ini. Falling back to default.
LogInit: Display: Running engine for game: TechArt
LogPlatformFile: Not using cached read wrapper
LogTaskGraph: Started task graph with 5 named threads and 47 total threads with 3 sets of task threads.
LogStats: Stats thread started at 0.049435
LogD3D11RHI: Loaded GFSDK_Aftermath_Lib.x64.dll
LogICUInternationalization: ICU TimeZone Detection - Raw Offset: -8:00, Platform Override: ''
LogPluginManager: Mounting plugin Paper2D
LogPluginManager: Mounting plugin AISupport
LogPluginManager: Mounting plugin LightPropagationVolume
LogPluginManager: Mounting plugin ActorLayerUtilities
LogPluginManager: Mounting plugin AnimationSharing
LogPluginManager: Mounting plugin CLionSourceCodeAccess
LogPluginManager: Mounting plugin CodeLiteSourceCodeAccess
LogPluginManager: Mounting plugin GitSourceControl
LogPluginManager: Mounting plugin KDevelopSourceCodeAccess
LogPluginManager: Mounting plugin NullSourceCodeAccess
LogPluginManager: Mounting plugin PerforceSourceControl
LogPluginManager: Mounting plugin SubversionSourceControl
LogPluginManager: Mounting plugin UObjectPlugin
LogPluginManager: Mounting plugin VisualStudioCodeSourceCodeAccess
LogPluginManager: Mounting plugin VisualStudioSourceCodeAccess
LogPluginManager: Mounting plugin XCodeSourceCodeAccess
LogPluginManager: Mounting plugin AssetManagerEditor
LogPluginManager: Mounting plugin CryptoKeys
LogPluginManager: Mounting plugin CurveEditorTools
LogPluginManager: Mounting plugin DataValidation
LogPluginManager: Mounting plugin FacialAnimation
LogPluginManager: Mounting plugin GameplayTagsEditor
LogPluginManager: Mounting plugin MacGraphicsSwitching
LogPluginManager: Mounting plugin MaterialAnalyzer
LogPluginManager: Mounting plugin MobileLauncherProfileWizard
LogPluginManager: Mounting plugin PluginBrowser
LogPluginManager: Mounting plugin SpeedTreeImporter
LogPluginManager: Mounting plugin DatasmithContent
LogPluginManager: Mounting plugin VariantManagerContent
LogPluginManager: Mounting plugin AlembicImporter
LogPluginManager: Mounting plugin AutomationUtils
LogPluginManager: Mounting plugin BackChannel
LogPluginManager: Mounting plugin CharacterAI
LogPluginManager: Mounting plugin GeometryCache
LogPluginManager: Mounting plugin HTML5Networking
LogPluginManager: Mounting plugin PlatformCrypto
LogPluginManager: Mounting plugin ProxyLODPlugin
LogPluginManager: Mounting plugin SkeletalReduction
LogPluginManager: Mounting plugin MagicLeap
LogPluginManager: Mounting plugin MagicLeapMedia
LogPluginManager: Mounting plugin AndroidMedia
LogPluginManager: Mounting plugin AvfMedia
LogPluginManager: Mounting plugin ImgMedia
LogPluginManager: Mounting plugin MediaCompositing
LogPluginManager: Mounting plugin MediaPlayerEditor
LogPluginManager: Mounting plugin WebMMedia
LogPluginManager: Mounting plugin WmfMedia
LogPluginManager: Mounting plugin TcpMessaging
LogPluginManager: Mounting plugin UdpMessaging
LogPluginManager: Mounting plugin ActorSequence
LogPluginManager: Mounting plugin LevelSequenceEditor
LogPluginManager: Mounting plugin MatineeToLevelSequence
LogPluginManager: Mounting plugin NetcodeUnitTest
LogPluginManager: Mounting plugin NUTUnrealEngine4
LogPluginManager: Mounting plugin OnlineSubsystemGooglePlay
LogPluginManager: Mounting plugin OnlineSubsystemIOS
LogPluginManager: Mounting plugin OnlineSubsystem
LogPluginManager: Mounting plugin OnlineSubsystemNull
LogPluginManager: Mounting plugin OnlineSubsystemUtils
LogPluginManager: Mounting plugin LauncherChunkInstaller
LogPluginManager: Mounting plugin AndroidDeviceProfileSelector
LogPluginManager: Mounting plugin AndroidMoviePlayer
LogPluginManager: Mounting plugin AndroidPermission
LogPluginManager: Mounting plugin AppleImageUtils
LogPluginManager: Mounting plugin AppleMoviePlayer
LogPluginManager: Mounting plugin ArchVisCharacter
LogPluginManager: Mounting plugin AudioCapture
LogPluginManager: Mounting plugin CableComponent
LogPluginManager: Mounting plugin CustomMeshComponent
LogPluginManager: Mounting plugin EditableMesh
LogPluginManager: Mounting plugin ExampleDeviceProfileSelector
LogPluginManager: Mounting plugin GoogleCloudMessaging
LogPluginManager: Mounting plugin IOSDeviceProfileSelector
LogPluginManager: Mounting plugin LinuxDeviceProfileSelector
LogPluginManager: Mounting plugin LocationServicesBPLibrary
LogPluginManager: Mounting plugin MobilePatchingUtils
LogPluginManager: Mounting plugin OculusVR
LogPluginManager: Mounting plugin PhysXVehicles
LogPluginManager: Mounting plugin ProceduralMeshComponent
LogPluginManager: Mounting plugin RuntimePhysXCooking
LogPluginManager: Mounting plugin SignificanceManager
LogPluginManager: Mounting plugin SteamVR
LogPluginManager: Mounting plugin WebMMoviePlayer
LogPluginManager: Mounting plugin WindowsMoviePlayer
LogPluginManager: Mounting plugin ScreenshotTools
LogInit: Using libcurl 7.55.1-DEV
LogInit:  - built for x86_64-pc-win32
LogInit:  - supports SSL with OpenSSL/1.1.1
LogInit:  - supports HTTP deflate (compression) using libz 1.2.8
LogInit:  - other features:
LogInit:      CURL_VERSION_SSL
LogInit:      CURL_VERSION_LIBZ
LogInit:      CURL_VERSION_IPV6
LogInit:      CURL_VERSION_ASYNCHDNS
LogInit:      CURL_VERSION_LARGEFILE
LogInit:      CURL_VERSION_IDN
LogInit:  CurlRequestOptions (configurable via config and command line):
LogInit:  - bVerifyPeer = true  - Libcurl will verify peer certificate
LogInit:  - bUseHttpProxy = false  - Libcurl will NOT use HTTP proxy
LogInit:  - bDontReuseConnections = false  - Libcurl will reuse connections
LogInit:  - MaxHostConnections = 16  - Libcurl will limit the number of connections to a host
LogInit:  - LocalHostAddr = Default
LogInit:  - BufferSize = 65536
LogOnline: OSS: Creating online subsystem instance for: NULL
LogInit: WinSock: version 1.1 (2.2), MaxSocks=32767, MaxUdp=65467
LogInit: Build: ++UE4+Release-4.23-CL-8386587
LogInit: Engine Version: 4.23.0-8386587+++UE4+Release-4.23
LogInit: Compatible Engine Version: 4.23.0-8386587+++UE4+Release-4.23
LogInit: Net CL: 8386587
LogInit: OS: Windows 10 (Release 1903) (), CPU: Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz, GPU: NVIDIA GeForce RTX 2080
LogInit: Compiled (64-bit): Aug 31 2019 02:04:44
LogInit: Compiled with Visual C++: 19.16.27030.01
LogInit: Build Configuration: Development
LogInit: Branch Name: ++UE4+Release-4.23
LogInit: Command Line: 
LogInit: Base Directory: D:/Program Files/Epic Games/UE_4.23/Engine/Binaries/Win64/
LogInit: Installed Engine Build: 1
LogDevObjectVersion: Number of dev versions registered: 23
LogDevObjectVersion:   Dev-Blueprints (B0D832E4-1F89-4F0D-ACCF-7EB736FD4AA2): 10
LogDevObjectVersion:   Dev-Build (E1C64328-A22C-4D53-A36C-8E866417BD8C): 0
LogDevObjectVersion:   Dev-Core (375EC13C-06E4-48FB-B500-84F0262A717E): 3
LogDevObjectVersion:   Dev-Editor (E4B068ED-F494-42E9-A231-DA0B2E46BB41): 34
LogDevObjectVersion:   Dev-Framework (CFFC743F-43B0-4480-9391-14DF171D2073): 35
LogDevObjectVersion:   Dev-Mobile (B02B49B5-BB20-44E9-A304-32B752E40360): 2
LogDevObjectVersion:   Dev-Networking (A4E4105C-59A1-49B5-A7C5-40C4547EDFEE): 0
LogDevObjectVersion:   Dev-Online (39C831C9-5AE6-47DC-9A44-9C173E1C8E7C): 0
LogDevObjectVersion:   Dev-Physics (78F01B33-EBEA-4F98-B9B4-84EACCB95AA2): 0
LogDevObjectVersion:   Dev-Platform (6631380F-2D4D-43E0-8009-CF276956A95A): 0
LogDevObjectVersion:   Dev-Rendering (12F88B9F-8875-4AFC-A67C-D90C383ABD29): 31
LogDevObjectVersion:   Dev-Sequencer (7B5AE74C-D270-4C10-A958-57980B212A5A): 11
LogDevObjectVersion:   Dev-VR (D7296918-1DD6-4BDD-9DE2-64A83CC13884): 2
LogDevObjectVersion:   Dev-LoadTimes (C2A15278-BFE7-4AFE-6C17-90FF531DF755): 1
LogDevObjectVersion:   Private-Geometry (6EACA3D4-40EC-4CC1-B786-8BED09428FC5): 3
LogDevObjectVersion:   Dev-AnimPhys (29E575DD-E0A3-4627-9D10-D276232CDCEA): 17
LogDevObjectVersion:   Dev-Anim (AF43A65D-7FD3-4947-9873-3E8ED9C1BB05): 2
LogDevObjectVersion:   Dev-ReflectionCapture (6B266CEC-1EC7-4B8F-A30B-E4D90942FC07): 1
LogDevObjectVersion:   Dev-Automation (0DF73D61-A23F-47EA-B727-89E90C41499A): 1
LogDevObjectVersion:   FortniteMain (601D1886-AC64-4F84-AA16-D3DE0DEAC7D6): 27
LogDevObjectVersion:   Dev-Enterprise (9DFFBCD6-494F-0158-E221-12823C92A888): 6
LogDevObjectVersion:   Dev-Niagara (F2AED0AC-9AFE-416F-8664-AA7FFA26D6FC): 1
LogDevObjectVersion:   Dev-Destruction (174F1F0B-B4C6-45A5-B13F-2EE8D0FB917D): 9
LogInit: Presizing for max 16777216 objects, including 0 objects not considered by GC, pre-allocating 0 bytes for permanent pool.
LogInit: Object subsystem initialized
LogConfig: Setting CVar [[con.DebugEarlyDefault:1]]
LogConfig: Setting CVar [[r.setres:1280x720]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[r.VSync:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[r.RHICmdBypass:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Applying CVar settings from Section [/Script/Engine.RendererSettings] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Engine.ini]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[r.GPUCrashDebugging:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[r.DefaultFeature.AutoExposure.ExtendDefaultLuminanceRange:1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Applying CVar settings from Section [/Script/Engine.RendererOverrideSettings] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Engine.ini]
[2019.09.24-20.41.11:317][  0]LogConfig: Applying CVar settings from Section [/Script/Engine.StreamingSettings] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Engine.ini]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.MinBulkDataSizeForAsyncLoading:131072]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.AsyncLoadingThreadEnabled:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.EventDrivenLoaderEnabled:1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.WarnIfTimeLimitExceeded:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.TimeLimitExceededMultiplier:1.5]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.TimeLimitExceededMinTime:0.005]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.UseBackgroundLevelStreaming:1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.PriorityAsyncLoadingExtraTime:15.0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.LevelStreamingActorsUpdateTimeLimit:5.0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.PriorityLevelStreamingActorsUpdateExtraTime:5.0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.LevelStreamingComponentsRegistrationGranularity:10]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.UnregisterComponentsTimeLimit:1.0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[s.LevelStreamingComponentsUnregistrationGranularity:5]]
[2019.09.24-20.41.11:317][  0]LogConfig: Applying CVar settings from Section [/Script/Engine.GarbageCollectionSettings] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Engine.ini]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.MaxObjectsNotConsideredByGC:1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.SizeOfPermanentObjectPool:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.FlushStreamingOnGC:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.NumRetriesBeforeForcingGC:10]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.AllowParallelGC:1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.TimeBetweenPurgingPendingKillObjects:61.1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.MaxObjectsInEditor:16777216]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.IncrementalBeginDestroyEnabled:1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.CreateGCClusters:1]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.MinGCClusterSize:5]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.ActorClusteringEnabled:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.BlueprintClusteringEnabled:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Setting CVar [[gc.UseDisregardForGCOnDedicatedServers:0]]
[2019.09.24-20.41.11:317][  0]LogConfig: Applying CVar settings from Section [/Script/Engine.NetworkSettings] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Engine.ini]
[2019.09.24-20.41.11:317][  0]LogConfig: Applying CVar settings from Section [/Script/UnrealEd.CookerSettings] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Engine.ini]
[2019.09.24-20.41.11:321][  0]LogConfig: Applying CVar settings from Section [ViewDistanceQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.SkeletalMeshLODBias:0]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.ViewDistanceScale:1.0]]
[2019.09.24-20.41.11:321][  0]LogConfig: Applying CVar settings from Section [AntiAliasingQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.PostProcessAAQuality:4]]
[2019.09.24-20.41.11:321][  0]LogConfig: Applying CVar settings from Section [ShadowQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.LightFunctionQuality:1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.ShadowQuality:5]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.Shadow.CSM.MaxCascades:10]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.Shadow.MaxResolution:2048]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.Shadow.MaxCSMResolution:2048]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.Shadow.RadiusThreshold:0.01]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.Shadow.DistanceScale:1.0]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.Shadow.CSM.TransitionScale:1.0]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.Shadow.PreShadowResolutionFactor:1.0]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.DistanceFieldShadowing:1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.DistanceFieldAO:1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.AOQuality:2]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.VolumetricFog:1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.VolumetricFog.GridPixelSize:8]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.VolumetricFog.GridSizeZ:128]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.VolumetricFog.HistoryMissSupersampleCount:4]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.LightMaxDrawDistanceScale:1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.CapsuleShadows:1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Applying CVar settings from Section [PostProcessQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.MotionBlurQuality:4]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.AmbientOcclusionMipLevelFactor:0.4]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.AmbientOcclusionMaxQuality:100]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.AmbientOcclusionLevels:-1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.AmbientOcclusionRadiusScale:1.0]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.DepthOfFieldQuality:2]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.RenderTargetPoolMin:400]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.LensFlareQuality:2]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.SceneColorFringeQuality:1]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.EyeAdaptationQuality:2]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.BloomQuality:5]]
[2019.09.24-20.41.11:321][  0]LogConfig: Setting CVar [[r.FastBlurThreshold:100]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Upscale.Quality:3]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Tonemapper.GrainQuantization:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.LightShaftQuality:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Filter.SizeScale:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Tonemapper.Quality:5]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Gather.AccumulatorQuality:1        ; higher gathering accumulator quality]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Gather.PostfilterMethod:1          ; Median3x3 postfilering method]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Gather.EnableBokehSettings:0       ; no bokeh simulation when gathering]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Gather.RingCount:4                 ; medium number of samples when gathering]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Scatter.ForegroundCompositing:1    ; additive foreground scattering]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Scatter.BackgroundCompositing:2    ; additive background scattering]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Scatter.EnableBokehSettings:1      ; bokeh simulation when scattering]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Scatter.MaxSpriteRatio:0.1         ; only a maximum of 10% of scattered bokeh]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Recombine.Quality:1                ; cheap slight out of focus]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Recombine.EnableBokehSettings:0    ; no bokeh simulation on slight out of focus]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.TemporalAAQuality:1                ; more stable temporal accumulation]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Kernel.MaxForegroundRadius:0.025]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DOF.Kernel.MaxBackgroundRadius:0.025]]
[2019.09.24-20.41.11:322][  0]LogConfig: Applying CVar settings from Section [TextureQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Streaming.MipBias:0]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Streaming.AmortizeCPUToGPUCopy:0]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Streaming.MaxNumTexturesToStreamPerFrame:0]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Streaming.Boost:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.MaxAnisotropy:8]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Streaming.LimitPoolSizeToVRAM:0]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Streaming.PoolSize:1000]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.Streaming.MaxEffectiveScreenSize:0]]
[2019.09.24-20.41.11:322][  0]LogConfig: Applying CVar settings from Section [EffectsQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.TranslucencyLightingVolumeDim:64]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.RefractionQuality:2]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.SSR.Quality:3]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.SceneColorFormat:4]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.DetailMode:2]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.TranslucencyVolumeBlur:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.MaterialQualityLevel:1 ; High quality]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.SSS.Scale:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.SSS.SampleSet:2]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.SSS.Quality:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.SSS.HalfRes:1]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.EmitterSpawnRateScale:1.0]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[r.ParticleLightQuality:2]]
[2019.09.24-20.41.11:322][  0]LogConfig: Applying CVar settings from Section [FoliageQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[foliage.DensityScale:1.0]]
[2019.09.24-20.41.11:322][  0]LogConfig: Setting CVar [[grass.DensityScale:1.0]]
[2019.09.24-20.41.11:322][  0]LogInit: Selected Device Profile: [Windows]
[2019.09.24-20.41.11:322][  0]LogInit: Applying CVar settings loaded from the selected device profile: [Windows]
[2019.09.24-20.41.11:324][  0]LogHAL: Display: Platform has ~ 64 GB [68634533888 / 68719476736 / 64], which maps to Largest [LargestMinGB=32, LargerMinGB=12, DefaultMinGB=8, SmallerMinGB=6, SmallestMinGB=0)
[2019.09.24-20.41.11:324][  0]LogInit: Going up to parent DeviceProfile []
[2019.09.24-20.41.11:324][  0]LogConfig: Applying CVar settings from Section [ViewDistanceQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.SkeletalMeshLODBias:0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.ViewDistanceScale:1.0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Applying CVar settings from Section [AntiAliasingQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.PostProcessAAQuality:4]]
[2019.09.24-20.41.11:324][  0]LogConfig: Applying CVar settings from Section [ShadowQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.LightFunctionQuality:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.ShadowQuality:5]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Shadow.CSM.MaxCascades:10]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Shadow.MaxResolution:2048]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Shadow.MaxCSMResolution:2048]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Shadow.RadiusThreshold:0.01]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Shadow.DistanceScale:1.0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Shadow.CSM.TransitionScale:1.0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Shadow.PreShadowResolutionFactor:1.0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DistanceFieldShadowing:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DistanceFieldAO:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.AOQuality:2]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.VolumetricFog:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.VolumetricFog.GridPixelSize:8]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.VolumetricFog.GridSizeZ:128]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.VolumetricFog.HistoryMissSupersampleCount:4]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.LightMaxDrawDistanceScale:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.CapsuleShadows:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Applying CVar settings from Section [PostProcessQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.MotionBlurQuality:4]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.AmbientOcclusionMipLevelFactor:0.4]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.AmbientOcclusionMaxQuality:100]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.AmbientOcclusionLevels:-1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.AmbientOcclusionRadiusScale:1.0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DepthOfFieldQuality:2]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.RenderTargetPoolMin:400]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.LensFlareQuality:2]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.SceneColorFringeQuality:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.EyeAdaptationQuality:2]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.BloomQuality:5]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.FastBlurThreshold:100]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Upscale.Quality:3]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Tonemapper.GrainQuantization:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.LightShaftQuality:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Filter.SizeScale:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Tonemapper.Quality:5]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Gather.AccumulatorQuality:1        ; higher gathering accumulator quality]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Gather.PostfilterMethod:1          ; Median3x3 postfilering method]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Gather.EnableBokehSettings:0       ; no bokeh simulation when gathering]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Gather.RingCount:4                 ; medium number of samples when gathering]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Scatter.ForegroundCompositing:1    ; additive foreground scattering]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Scatter.BackgroundCompositing:2    ; additive background scattering]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Scatter.EnableBokehSettings:1      ; bokeh simulation when scattering]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Scatter.MaxSpriteRatio:0.1         ; only a maximum of 10% of scattered bokeh]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Recombine.Quality:1                ; cheap slight out of focus]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Recombine.EnableBokehSettings:0    ; no bokeh simulation on slight out of focus]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.TemporalAAQuality:1                ; more stable temporal accumulation]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Kernel.MaxForegroundRadius:0.025]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DOF.Kernel.MaxBackgroundRadius:0.025]]
[2019.09.24-20.41.11:324][  0]LogConfig: Applying CVar settings from Section [TextureQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Streaming.MipBias:0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Streaming.AmortizeCPUToGPUCopy:0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Streaming.MaxNumTexturesToStreamPerFrame:0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Streaming.Boost:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.MaxAnisotropy:8]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Streaming.LimitPoolSizeToVRAM:0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Streaming.PoolSize:1000]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.Streaming.MaxEffectiveScreenSize:0]]
[2019.09.24-20.41.11:324][  0]LogConfig: Applying CVar settings from Section [EffectsQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.TranslucencyLightingVolumeDim:64]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.RefractionQuality:2]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.SSR.Quality:3]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.SceneColorFormat:4]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.DetailMode:2]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.TranslucencyVolumeBlur:1]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.MaterialQualityLevel:1 ; High quality]]
[2019.09.24-20.41.11:324][  0]LogConfig: Setting CVar [[r.SSS.Scale:1]]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[r.SSS.SampleSet:2]]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[r.SSS.Quality:1]]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[r.SSS.HalfRes:1]]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[r.EmitterSpawnRateScale:1.0]]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[r.ParticleLightQuality:2]]
[2019.09.24-20.41.11:325][  0]LogConfig: Applying CVar settings from Section [FoliageQuality@3] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Scalability.ini]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[foliage.DensityScale:1.0]]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[grass.DensityScale:1.0]]
[2019.09.24-20.41.11:325][  0]LogConfig: Applying CVar settings from Section [Startup] File [../../../Engine/Config/ConsoleVariables.ini]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[net.UseAdaptiveNetUpdateFrequency:0]]
[2019.09.24-20.41.11:325][  0]LogConfig: Setting CVar [[p.chaos.AllowCreatePhysxBodies:1]]
[2019.09.24-20.41.11:325][  0]LogConfig: Applying CVar settings from Section [ConsoleVariables] File [D:/Git/UEGym/TechArt/Saved/Config/Windows/Engine.ini]
[2019.09.24-20.41.11:325][  0]LogInit: Computer: VICTOR
[2019.09.24-20.41.11:325][  0]LogInit: User: victorl
[2019.09.24-20.41.11:325][  0]LogInit: CPU Page size=4096, Cores=8
[2019.09.24-20.41.11:325][  0]LogInit: High frequency timer resolution =10.000000 MHz
[2019.09.24-20.41.11:325][  0]LogMemory: Memory total: Physical=63.9GB (64GB approx)
[2019.09.24-20.41.11:325][  0]LogMemory: Platform Memory Stats for Windows
[2019.09.24-20.41.11:325][  0]LogMemory: Process Physical Memory: 101.75 MB used, 101.76 MB peak
[2019.09.24-20.41.11:325][  0]LogMemory: Process Virtual Memory: 102.45 MB used, 102.45 MB peak
[2019.09.24-20.41.11:325][  0]LogMemory: Physical Memory: 21726.01 MB used,  43728.98 MB free, 65454.99 MB total
[2019.09.24-20.41.11:325][  0]LogMemory: Virtual Memory: 4703.05 MB used,  134213024.00 MB free, 134217728.00 MB total
[2019.09.24-20.41.11:327][  0]LogWindows: WindowsPlatformFeatures enabled
[2019.09.24-20.41.11:339][  0]LogInit: Using OS detected language (en-US).
[2019.09.24-20.41.11:339][  0]LogInit: Using OS detected locale (en-CA).
[2019.09.24-20.41.11:340][  0]LogTextLocalizationManager: No specific localization for 'en-US' exists, so the 'en' localization will be used.
[2019.09.24-20.41.11:471][  0]LogInit: Setting process to per monitor DPI aware
[2019.09.24-20.41.11:494][  0]LogSlate: New Slate User Created.  User Index 0, Is Virtual User: 0
[2019.09.24-20.41.11:494][  0]LogSlate: Slate User Registered.  User Index 0, Is Virtual User: 0
[2019.09.24-20.41.11:601][  0]LogHMD: Failed to initialize OpenVR with code 110
[2019.09.24-20.41.11:601][  0]LogD3D11RHI: D3D11 adapters:
[2019.09.24-20.41.11:657][  0]LogD3D11RHI:    0. 'NVIDIA GeForce RTX 2080' (Feature Level 11_0)
[2019.09.24-20.41.11:657][  0]LogD3D11RHI:       8010/0/32727 MB DedicatedVideo/DedicatedSystem/SharedSystem, Outputs:2, VendorId:0x10de
[2019.09.24-20.41.11:659][  0]LogD3D11RHI:    1. 'Microsoft Basic Render Driver' (Feature Level 11_0)
[2019.09.24-20.41.11:659][  0]LogD3D11RHI:       0/0/32727 MB DedicatedVideo/DedicatedSystem/SharedSystem, Outputs:0, VendorId:0x1414
[2019.09.24-20.41.11:659][  0]LogD3D11RHI: Chosen D3D11 Adapter: 0
[2019.09.24-20.41.11:667][  0]LogD3D11RHI: Creating new Direct3DDevice
[2019.09.24-20.41.11:667][  0]LogD3D11RHI:     GPU DeviceId: 0x1e82 (for the marketing name, search the web for "GPU Device Id")
[2019.09.24-20.41.11:667][  0]LogWindows: EnumDisplayDevices:
[2019.09.24-20.41.11:667][  0]LogWindows:    0. 'NVIDIA GeForce RTX 2080' (P:1 D:1)
[2019.09.24-20.41.11:667][  0]LogWindows:    1. 'NVIDIA GeForce RTX 2080' (P:0 D:1)
[2019.09.24-20.41.11:667][  0]LogWindows:    2. 'NVIDIA GeForce RTX 2080' (P:0 D:0)
[2019.09.24-20.41.11:668][  0]LogWindows:    3. 'NVIDIA GeForce RTX 2080' (P:0 D:0)
[2019.09.24-20.41.11:668][  0]LogWindows: DebugString: FoundDriverCount:4 
[2019.09.24-20.41.11:668][  0]LogD3D11RHI:     Adapter Name: NVIDIA GeForce RTX 2080
[2019.09.24-20.41.11:668][  0]LogD3D11RHI:   Driver Version: 436.30 (internal:26.21.14.3630, unified:436.30)
[2019.09.24-20.41.11:668][  0]LogD3D11RHI:      Driver Date: 9-5-2019
[2019.09.24-20.41.11:668][  0]LogRHI: Texture pool is 5607 MB (70% of 8010 MB)
[2019.09.24-20.41.11:701][  0]LogD3D11RHI: Async texture creation enabled
[2019.09.24-20.41.11:725][  0]LogD3D11RHI: GPU Timing Frequency: 1000.000000 (Debug: 2 1)
[2019.09.24-20.41.12:024][  0]LogTemp: Display: Module 'AllDesktopTargetPlatform' loaded TargetPlatform 'AllDesktop'
[2019.09.24-20.41.12:029][  0]LogTemp: Display: Module 'MacClientTargetPlatform' loaded TargetPlatform 'MacClient'
[2019.09.24-20.41.12:034][  0]LogTemp: Display: Module 'MacNoEditorTargetPlatform' loaded TargetPlatform 'MacNoEditor'
[2019.09.24-20.41.12:039][  0]LogTemp: Display: Module 'MacServerTargetPlatform' loaded TargetPlatform 'MacServer'
[2019.09.24-20.41.12:045][  0]LogTemp: Display: Module 'MacTargetPlatform' loaded TargetPlatform 'Mac'
[2019.09.24-20.41.12:050][  0]LogTemp: Display: Module 'WindowsClientTargetPlatform' loaded TargetPlatform 'WindowsClient'
[2019.09.24-20.41.12:055][  0]LogTemp: Display: Module 'WindowsNoEditorTargetPlatform' loaded TargetPlatform 'WindowsNoEditor'
[2019.09.24-20.41.12:060][  0]LogTemp: Display: Module 'WindowsServerTargetPlatform' loaded TargetPlatform 'WindowsServer'
[2019.09.24-20.41.12:063][  0]LogTemp: Display: Module 'WindowsTargetPlatform' loaded TargetPlatform 'Windows'
[2019.09.24-20.41.12:091][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ASTC'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ATC'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_DXT'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ETC1'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ETC1a'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ETC2'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_PVRTC'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'AndroidClient'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ASTCClient'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ATCClient'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_DXTClient'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ETC1Client'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ETC1aClient'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_ETC2Client'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_PVRTCClient'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_Multi'
[2019.09.24-20.41.12:092][  0]LogTemp: Display: Module 'AndroidTargetPlatform' loaded TargetPlatform 'Android_MultiClient'
[2019.09.24-20.41.12:093][  0]LogTemp: Display: Module 'HTML5TargetPlatform' loaded TargetPlatform 'HTML5'
[2019.09.24-20.41.12:103][  0]LogTemp: Display: Module 'IOSTargetPlatform' loaded TargetPlatform 'IOSClient'
[2019.09.24-20.41.12:103][  0]LogTemp: Display: Module 'IOSTargetPlatform' loaded TargetPlatform 'IOS'
[2019.09.24-20.41.12:112][  0]LogTemp: Display: Module 'TVOSTargetPlatform' loaded TargetPlatform 'TVOSClient'
[2019.09.24-20.41.12:112][  0]LogTemp: Display: Module 'TVOSTargetPlatform' loaded TargetPlatform 'TVOS'
[2019.09.24-20.41.12:116][  0]LogTemp: Display: Module 'LinuxClientTargetPlatform' loaded TargetPlatform 'LinuxClient'
[2019.09.24-20.41.12:121][  0]LogTemp: Display: Module 'LinuxNoEditorTargetPlatform' loaded TargetPlatform 'LinuxNoEditor'
[2019.09.24-20.41.12:125][  0]LogTemp: Display: Module 'LinuxServerTargetPlatform' loaded TargetPlatform 'LinuxServer'
[2019.09.24-20.41.12:130][  0]LogTemp: Display: Module 'LinuxTargetPlatform' loaded TargetPlatform 'Linux'
[2019.09.24-20.41.12:145][  0]LogTemp: Display: Module 'LuminTargetPlatform' loaded TargetPlatform 'Lumin'
[2019.09.24-20.41.12:145][  0]LogTemp: Display: Module 'LuminTargetPlatform' loaded TargetPlatform 'LuminClient'
[2019.09.24-20.41.12:145][  0]LogTargetPlatformManager: Display: Building Assets For Windows
[2019.09.24-20.41.12:149][  0]LogAudioDebug: Display: Lib vorbis DLL was dynamically loaded.
[2019.09.24-20.41.12:175][  0]LogShaderCompilers: Guid format shader working directory is 13 characters bigger than the processId version (../../../../../../Git/UEGym/TechArt/Intermediate/Shaders/WorkingDirectory/20876/).
[2019.09.24-20.41.12:175][  0]LogShaderCompilers: Cleaned the shader compiler working directory 'C:/Users/victor.l/AppData/Local/Temp/UnrealShaderWorkingDir/2578AF684FBE32102B4A81A5A3030EA1/'.
[2019.09.24-20.41.12:176][  0]LogXGEController: Cannot use XGE Controller as Incredibuild is not installed on this machine.
[2019.09.24-20.41.12:176][  0]LogShaderCompilers: Cannot use XGE Shader Compiler as Incredibuild is not installed on this machine.
[2019.09.24-20.41.12:176][  0]LogShaderCompilers: Display: Using Local Shader Compiler.
[2019.09.24-20.41.12:601][  0]LogDerivedDataCache: Display: Max Cache Size: 512 MB
[2019.09.24-20.41.12:640][  0]LogDerivedDataCache: Loaded boot cache 0.04s 73MB C:/Users/victor.l/AppData/Local/UnrealEngine/4.23/DerivedDataCache/Boot.ddc.
[2019.09.24-20.41.12:640][  0]LogDerivedDataCache: Display: Loaded Boot cache: C:/Users/victor.l/AppData/Local/UnrealEngine/4.23/DerivedDataCache/Boot.ddc
[2019.09.24-20.41.12:640][  0]LogDerivedDataCache: FDerivedDataBackendGraph:  Pak pak cache file ../../../../../../Git/UEGym/TechArt/DerivedDataCache/DDC.ddp not found, will not use a pak cache.
[2019.09.24-20.41.12:640][  0]LogDerivedDataCache: Unable to find inner node Pak for hierarchical cache Hierarchy.
[2019.09.24-20.41.12:640][  0]LogDerivedDataCache: FDerivedDataBackendGraph:  CompressedPak pak cache file ../../../../../../Git/UEGym/TechArt/DerivedDataCache/Compressed.ddp not found, will not use a pak cache.
[2019.09.24-20.41.12:640][  0]LogDerivedDataCache: Unable to find inner node CompressedPak for hierarchical cache Hierarchy.
[2019.09.24-20.41.12:648][  0]LogDerivedDataCache: Display: Pak cache opened for reading ../../../Engine/DerivedDataCache/Compressed.ddp.
[2019.09.24-20.41.12:648][  0]LogDerivedDataCache: FDerivedDataBackendGraph:  EnterprisePak pak cache file ../../../Enterprise/DerivedDataCache/Compressed.ddp not found, will not use a pak cache.
[2019.09.24-20.41.12:648][  0]LogDerivedDataCache: Unable to find inner node EnterprisePak for hierarchical cache Hierarchy.
[2019.09.24-20.41.12:649][  0]LogDerivedDataCache: Using Local data cache path C:/Users/victor.l/AppData/Local/UnrealEngine/Common/DerivedDataCache: Writable
[2019.09.24-20.41.12:649][  0]LogDerivedDataCache: Shared data cache path not found in *engine.ini, will not use an Shared cache.
[2019.09.24-20.41.12:649][  0]LogDerivedDataCache: Unable to find inner node Shared for hierarchical cache Hierarchy.
[2019.09.24-20.41.12:664][  0]LogMaterial: Verifying Global Shaders for PCD3D_SM5
[2019.09.24-20.41.12:666][  0]LogSlate: Using FreeType 2.6.0
[2019.09.24-20.41.12:666][  0]LogSlate: SlateFontServices - WITH_FREETYPE: 1, WITH_HARFBUZZ: 1
[2019.09.24-20.41.12:701][  0]LogAssetRegistry: FAssetRegistry took 0.0018 seconds to start up
[2019.09.24-20.41.12:878][  0]LogInit: Selected Device Profile: [Windows]
[2019.09.24-20.41.12:977][  0]LogMeshReduction: Using QuadricMeshReduction for automatic static mesh reduction
[2019.09.24-20.41.12:977][  0]LogMeshReduction: Using SimplygonMeshReduction for automatic skeletal mesh reduction
[2019.09.24-20.41.12:977][  0]LogMeshReduction: Using ProxyLODMeshReduction for automatic mesh merging
[2019.09.24-20.41.12:977][  0]LogMeshReduction: No distributed automatic mesh merging module available
[2019.09.24-20.41.12:977][  0]LogMeshMerging: No distributed automatic mesh merging module available
[2019.09.24-20.41.12:985][  0]LogNetVersion: TechArt 1.0.0, NetCL: 8386587, EngineNetVer: 11, GameNetVer: 0 (Checksum: 3603757192)
[2019.09.24-20.41.13:258][  0]LogPackageLocalizationCache: Processed 12 localized package path(s) for 1 prioritized culture(s) in 0.027022 seconds
[2019.09.24-20.41.13:262][  0]LogUObjectArray: 43444 objects as part of root set at end of initial load.
[2019.09.24-20.41.13:262][  0]LogUObjectAllocator: 7548648 out of 0 bytes used by permanent object pool.
[2019.09.24-20.41.13:263][  0]LogUObjectArray: CloseDisregardForGC: 0/0 objects in disregard for GC pool
[2019.09.24-20.41.13:793][  0]LogTcpMessaging: Initializing TcpMessaging bridge
[2019.09.24-20.41.13:794][  0]LogUdpMessaging: Initializing bridge on interface 0.0.0.0:0 to multicast group 230.0.0.1:6666.
[2019.09.24-20.41.13:826][  0]SourceControl: Source control is disabled
[2019.09.24-20.41.13:826][  0]SourceControl: Source control is disabled
[2019.09.24-20.41.13:827][  0]SourceControl: Source control is disabled
[2019.09.24-20.41.13:828][  0]SourceControl: Source control is disabled
[2019.09.24-20.41.13:876][  0]LogAndroidPermission: UAndroidPermissionCallbackProxy::GetInstance
[2019.09.24-20.41.13:956][  0]LogOcInput: OculusInput pre-init called
[2019.09.24-20.41.13:959][  0]LogWindows: Failed to load 'OVRPlugin.dll' (GetLastError=126)
[2019.09.24-20.41.13:959][  0]LogWindows: File 'OVRPlugin.dll' does not exist
[2019.09.24-20.41.14:002][  0]LogEngine: Initializing Engine...
[2019.09.24-20.41.14:003][  0]LogHMD: Failed to initialize OpenVR with code 110
[2019.09.24-20.41.14:004][  0]LogStats: UGameplayTagsManager::InitializeManager -  0.000 s
[2019.09.24-20.41.14:167][  0]LogInit: Initializing FReadOnlyCVARCache
[2019.09.24-20.41.14:174][  0]LogAIModule: Creating AISystem for world Untitled
[2019.09.24-20.41.14:203][  0]LogInit: XAudio2 using 'Headphones (High Definition Audio Device)' : 2 channels at 48 kHz using 32 bits per sample (channel mask 0x3)
[2019.09.24-20.41.14:216][  0]LogInit: FAudioDevice initialized.
[2019.09.24-20.41.14:216][  0]LogNetVersion: Set ProjectVersion to 1.0.0.0. Version Checksum will be recalculated on next use.
[2019.09.24-20.41.14:261][  0]LogDerivedDataCache: Saved boot cache 0.05s 73MB C:/Users/victor.l/AppData/Local/UnrealEngine/4.23/DerivedDataCache/Boot.ddc.
[2019.09.24-20.41.14:270][  0]LogInit: Texture streaming: Enabled
[2019.09.24-20.41.14:279][  0]LogEngineSessionManager: EngineSessionManager initialized
[2019.09.24-20.41.14:316][  0]LogInit: Transaction tracking system initialized
[2019.09.24-20.41.14:330][  0]BlueprintLog: New page: Editor Load
[2019.09.24-20.41.14:367][  0]LocalizationService: Localization service is disabled
[2019.09.24-20.41.14:510][  0]LogFileCache: Scanning file cache for directory 'D:/Git/UEGym/TechArt/Content/' took 0.00s
[2019.09.24-20.41.14:510][  0]LogCook: Display: Max memory allowance for cook 16384mb min free memory 0mb
[2019.09.24-20.41.14:510][  0]LogCook: Display: Mobile HDR setting 1
[2019.09.24-20.41.14:612][  0]SourceControl: Source control is disabled
[2019.09.24-20.41.14:612][  0]Cmd: MAP LOAD FILE="../../../../../../Git/UEGym/TechArt/Content/StarterContent/Maps/Minimal_Default.umap" TEMPLATE=0 SHOWPROGRESS=1 FEATURELEVEL=3
[2019.09.24-20.41.14:612][  0]LightingResults: New page: Lighting Build
[2019.09.24-20.41.14:614][  0]LogWorld: UWorld::CleanupWorld for Untitled, bSessionEnded=true, bCleanupResources=true
[2019.09.24-20.41.14:614][  0]MapCheck: New page: Map Check
[2019.09.24-20.41.14:614][  0]LightingResults: New page: Lighting Build
[2019.09.24-20.41.14:641][  0]LogUObjectHash: Compacting FUObjectHashTables data took   1.21ms
[2019.09.24-20.41.14:875][  0]LogAIModule: Creating AISystem for world Minimal_Default
[2019.09.24-20.41.14:881][  0]LogEditorServer: Finished looking for orphan Actors (0.000 secs)
[2019.09.24-20.41.14:914][  0]LogUObjectHash: Compacting FUObjectHashTables data took   1.51ms
[2019.09.24-20.41.14:914][  0]Cmd: MAP CHECKDEP NOCLEARLOG
[2019.09.24-20.41.14:914][  0]MapCheck: Map check complete: 0 Error(s), 0 Warning(s), took 0.08ms to complete.
[2019.09.24-20.41.14:915][  0]LogFileHelpers: Loading map 'Minimal_Default' took 0.303
[2019.09.24-20.41.15:010][  0]LogSlate: Updating window title bar state: overlay mode, drag disabled, window buttons hidden, title bar hidden
[2019.09.24-20.41.15:014][  0]LogSlate: Updating window title bar state: overlay mode, drag disabled, window buttons hidden, title bar hidden
[2019.09.24-20.41.15:019][  0]LogSlate: Updating window title bar state: overlay mode, drag disabled, window buttons hidden, title bar hidden
[2019.09.24-20.41.15:023][  0]LogSlate: Updating window title bar state: overlay mode, drag disabled, window buttons hidden, title bar hidden
[2019.09.24-20.41.15:026][  0]LogCollectionManager: Loaded 0 collections in 0.000640 seconds
[2019.09.24-20.41.15:029][  0]LogFileCache: Scanning file cache for directory 'D:/Git/UEGym/TechArt/Saved/Collections/' took 0.00s
[2019.09.24-20.41.15:029][  0]LogFileCache: Scanning file cache for directory 'D:/Git/UEGym/TechArt/Content/Developers/victorl/Collections/' took 0.00s
[2019.09.24-20.41.15:029][  0]LogFileCache: Scanning file cache for directory 'D:/Git/UEGym/TechArt/Content/Collections/' took 0.00s
[2019.09.24-20.41.15:029][  0]LogCollectionManager: Rebuilt the GUID cache for 0 collections in 0.000001 seconds
[2019.09.24-20.41.15:035][  0]LogContentBrowser: Native class hierarchy populated in 0.0059 seconds. Added 2863 classes and 680 folders.
[2019.09.24-20.41.15:040][  0]LogContentBrowser: Native class hierarchy updated for 'WidgetCarousel' in 0.0001 seconds. Added 0 classes and 0 folders.
[2019.09.24-20.41.15:060][  0]LogContentBrowser: Native class hierarchy updated for 'AddContentDialog' in 0.0002 seconds. Added 0 classes and 0 folders.
[2019.09.24-20.41.15:063][  0]LogContentBrowser: Native class hierarchy updated for 'SceneOutliner' in 0.0002 seconds. Added 1 classes and 2 folders.
[2019.09.24-20.41.15:080][  0]LogSlate: Took 0.000138 seconds to synchronously load lazily loaded font '../../../Engine/Content/Slate/Fonts/Roboto-Regular.ttf' (155K)
[2019.09.24-20.41.15:083][  0]LogSlate: Took 0.000092 seconds to synchronously load lazily loaded font '../../../Engine/Content/Slate/Fonts/Roboto-Bold.ttf' (160K)
[2019.09.24-20.41.15:084][  0]LogSlate: Took 0.000081 seconds to synchronously load lazily loaded font '../../../Engine/Content/Editor/Slate/Fonts/FontAwesome.ttf' (139K)
[2019.09.24-20.41.15:091][  0]LogRenderer: Reallocating scene render targets to support 1000x436 Format 10 NumSamples 1 (Frame:1).
[2019.09.24-20.41.15:130][  0]LogSlate: Took 0.000102 seconds to synchronously load lazily loaded font '../../../Engine/Content/Slate/Fonts/Roboto-Light.ttf' (167K)
[2019.09.24-20.41.15:173][  0]LogContentBrowser: Native class hierarchy updated for 'HierarchicalLODOutliner' in 0.0002 seconds. Added 0 classes and 0 folders.
[2019.09.24-20.41.15:173][  0]LogLoad: (Engine Initialization) Total time: 4.29 seconds
[2019.09.24-20.41.15:173][  0]LogLoad: (Engine Initialization) Total Blueprint compile time: 0.00 seconds
[2019.09.24-20.41.15:275][  0]LogAssetRegistry: Asset discovery search completed in 2.5740 seconds
[2019.09.24-20.41.15:277][  0]LogCollectionManager: Rebuilt the object cache for 0 collections in 0.000003 seconds (found 0 objects)
[2019.09.24-20.41.15:277][  0]LogCollectionManager: Fixed up redirectors for 0 collections in 0.000045 seconds (updated 0 objects)
[2019.09.24-20.41.15:278][  0]LogContentStreaming: Texture pool size now 1000 MB
[2019.09.24-20.41.16:197][ 97]LogSlate: Took 0.000102 seconds to synchronously load lazily loaded font '../../../Engine/Content/Slate/Fonts/Roboto-Light.ttf' (167K)
[2019.09.24-20.41.31:186][241]LogSlate: FSceneViewport::OnFocusLost() reason 0
[2019.09.24-20.41.31:974][288]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 20
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 16
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 14
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 12
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 10
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 8
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 6
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 4
[2019.09.24-20.41.32:002][288]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 2
[2019.09.24-20.41.32:005][288]LogAssetEditorManager: Opening Asset editor for Material /Game/M_Cloud2.M_Cloud2
[2019.09.24-20.41.32:007][288]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.41.32:232][288]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 13
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 12
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 11
[2019.09.24-20.41.32:240][288]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 10
[2019.09.24-20.41.32:242][288]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.41.32:260][288]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.41.32:266][288]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_0, compiling. 
[2019.09.24-20.41.32:273][288]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureSample_0, compiling. 
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 31
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 30
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 29
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 28
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Warning: Failed to compile Material /Game/M_Cloud2.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.41.32:311][288]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}


void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{
	OutTexCoords[0] = Parameters.TexCoords[0].xy;

}

void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{

}


float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1919 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1944 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1959 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float4  Local0 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material.Texture2D_0, Material.Texture2D_0Sampler,Parameters.TexCoords[0].xy,View.MaterialTextureMipBias));
	float3  Local1 = CustomExpression0(Parameters,Local0.rgb,Local0.rgb,Local0.rgb);
	float3  Local2 = (Local1 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local2;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 25 "/Engine/Private/LocalVertexFactoryCommon.ush"
	float4 TexCoords[( 1 +1)/2] : TEXCOORD0;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};


float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}


float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];


		const uint NumFetchTexCoords = LocalVF.VertexFetch_Parameters[ 1 ];
		[unroll]
		for (uint CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
		{

			uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
			Result.TexCoords[CoordinateIndex] = LocalVF.VertexFetch_TexCoordBuffer[NumFetchTexCoords * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + ClampedCoordinateIndex];
		}
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;


	float2 CustomizedUVs[ 1 ];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.41.32:312][288]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.41.32:312][288]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.41.32:312][288]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.41.32:318][288]LogSlate: Took 0.000098 seconds to synchronously load lazily loaded font '../../../Engine/Content/Slate/Fonts/Roboto-BoldCondensed.ttf' (158K)
[2019.09.24-20.41.32:391][288]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 27
[2019.09.24-20.41.32:391][288]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 26
[2019.09.24-20.41.32:391][288]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 25
[2019.09.24-20.41.32:391][288]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 24
[2019.09.24-20.41.32:391][288]LogRenderer: Reallocating scene render targets to support 1000x456 Format 10 NumSamples 1 (Frame:1).
[2019.09.24-20.41.32:392][288]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 23
[2019.09.24-20.41.32:392][288]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 22
[2019.09.24-20.41.32:392][288]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 21
[2019.09.24-20.41.32:392][288]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 20
[2019.09.24-20.41.32:392][288]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 19
[2019.09.24-20.41.32:419][290]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.41.32:419][290]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 17
[2019.09.24-20.41.32:419][290]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.41.32:419][290]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.41.32:419][290]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.41.32:419][290]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 13
[2019.09.24-20.41.32:419][290]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 12
[2019.09.24-20.41.32:460][294]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 11
[2019.09.24-20.41.32:460][294]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 10
[2019.09.24-20.41.32:460][294]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 9
[2019.09.24-20.41.32:460][294]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 8
[2019.09.24-20.41.32:493][297]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 7
[2019.09.24-20.41.32:493][297]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 6
[2019.09.24-20.41.32:505][298]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 5
[2019.09.24-20.41.32:516][299]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 4
[2019.09.24-20.41.32:527][300]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 3
[2019.09.24-20.41.32:542][301]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 2
[2019.09.24-20.41.32:552][302]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 1
[2019.09.24-20.41.32:553][302]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.41.32:553][302]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.41.32:554][302]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.41.32:554][302]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.41.32:554][302]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}


void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{
	OutTexCoords[0] = Parameters.TexCoords[0].xy;

}

void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{

}


float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1919 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1944 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1959 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float4  Local0 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material.Texture2D_0, Material.Texture2D_0Sampler,Parameters.TexCoords[0].xy,View.MaterialTextureMipBias));
	float3  Local1 = CustomExpression0(Parameters,Local0.rgb,Local0.rgb,Local0.rgb);
	float3  Local2 = (Local1 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local2;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 25 "/Engine/Private/LocalVertexFactoryCommon.ush"
	float4 TexCoords[( 1 +1)/2] : TEXCOORD0;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};


float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}


float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];


		const uint NumFetchTexCoords = LocalVF.VertexFetch_Parameters[ 1 ];
		[unroll]
		for (uint CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
		{

			uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
			Result.TexCoords[CoordinateIndex] = LocalVF.VertexFetch_TexCoordBuffer[NumFetchTexCoords * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + ClampedCoordinateIndex];
		}
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;


	float2 CustomizedUVs[ 1 ];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.41.32:554][302]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.41.32:554][302]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.41.32:563][303]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.41.32:563][303]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.41.32:563][303]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.41.32:563][303]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}


void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{
	OutTexCoords[0] = Parameters.TexCoords[0].xy;

}

void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{

}


float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1919 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1944 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1959 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float4  Local0 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material.Texture2D_0, Material.Texture2D_0Sampler,Parameters.TexCoords[0].xy,View.MaterialTextureMipBias));
	float3  Local1 = CustomExpression0(Parameters,Local0.rgb,Local0.rgb,Local0.rgb);
	float3  Local2 = (Local1 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local2;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 25 "/Engine/Private/LocalVertexFactoryCommon.ush"
	float4 TexCoords[( 1 +1)/2] : TEXCOORD0;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};


float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}


float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];


		const uint NumFetchTexCoords = LocalVF.VertexFetch_Parameters[ 1 ];
		[unroll]
		for (uint CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
		{

			uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
			Result.TexCoords[CoordinateIndex] = LocalVF.VertexFetch_TexCoordBuffer[NumFetchTexCoords * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + ClampedCoordinateIndex];
		}
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;


	float2 CustomizedUVs[ 1 ];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.41.32:564][303]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.41.32:564][303]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.41.32:565][303]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.41.32:565][303]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.45.56:401][416]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.45.56:419][417]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.45.56:488][425]LogMaterialEditor: Saving and Compiling material M_Cloud2
[2019.09.24-20.45.56:539][425]Cmd: OBJ SAVEPACKAGE PACKAGE="/Game/M_Cloud2" FILE="../../../../../../Git/UEGym/TechArt/Content/M_Cloud2.uasset" SILENT=true
[2019.09.24-20.45.56:564][425]LogSavePackage: Moving '../../../../../../Git/UEGym/TechArt/Saved/M_Cloud25DA285AB4E59DEA689682A9B60A022C3.tmp' to '../../../../../../Git/UEGym/TechArt/Content/M_Cloud2.uasset'
[2019.09.24-20.45.56:603][427]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 7
[2019.09.24-20.45.56:614][428]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 6
[2019.09.24-20.45.56:614][428]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.45.56:614][428]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.45.56:634][429]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.45.56:634][429]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.45.56:634][429]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.45.56:750][433]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.45.56:750][433]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.45.56:750][433]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.45.56:750][433]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.45.56:750][433]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}


void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{
	OutTexCoords[0] = Parameters.TexCoords[0].xy;

}

void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{

}


float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1919 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1944 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1959 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float4  Local0 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material.Texture2D_0, Material.Texture2D_0Sampler,Parameters.TexCoords[0].xy,View.MaterialTextureMipBias));
	float3  Local1 = CustomExpression0(Parameters,Local0.rgb,Local0.rgb,Local0.rgb);
	float3  Local2 = (Local1 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local2;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 25 "/Engine/Private/LocalVertexFactoryCommon.ush"
	float4 TexCoords[( 1 +1)/2] : TEXCOORD0;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};


float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}


float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];


		const uint NumFetchTexCoords = LocalVF.VertexFetch_Parameters[ 1 ];
		[unroll]
		for (uint CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
		{

			uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
			Result.TexCoords[CoordinateIndex] = LocalVF.VertexFetch_TexCoordBuffer[NumFetchTexCoords * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + ClampedCoordinateIndex];
		}
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;


	float2 CustomizedUVs[ 1 ];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.45.56:751][433]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.45.56:751][433]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.45.56:758][434]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.45.56:758][434]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.45.56:758][434]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.45.56:758][434]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}


void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{
	OutTexCoords[0] = Parameters.TexCoords[0].xy;

}

void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{

}


float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1919 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1944 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1959 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float4  Local0 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material.Texture2D_0, Material.Texture2D_0Sampler,Parameters.TexCoords[0].xy,View.MaterialTextureMipBias));
	float3  Local1 = CustomExpression0(Parameters,Local0.rgb,Local0.rgb,Local0.rgb);
	float3  Local2 = (Local1 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local2;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 25 "/Engine/Private/LocalVertexFactoryCommon.ush"
	float4 TexCoords[( 1 +1)/2] : TEXCOORD0;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};


float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}


float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];


		const uint NumFetchTexCoords = LocalVF.VertexFetch_Parameters[ 1 ];
		[unroll]
		for (uint CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
		{

			uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
			Result.TexCoords[CoordinateIndex] = LocalVF.VertexFetch_TexCoordBuffer[NumFetchTexCoords * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + ClampedCoordinateIndex];
		}
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;


	float2 CustomizedUVs[ 1 ];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.45.56:759][434]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.45.56:759][434]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.46.44:326][545]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.46.44:335][545]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_0, compiling. 
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 23
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 22
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 21
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 20
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 19
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 18
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 17
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 16
[2019.09.24-20.46.44:343][545]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 15
[2019.09.24-20.46.44:344][545]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 14
[2019.09.24-20.46.44:344][545]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 13
[2019.09.24-20.46.44:344][545]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 12
[2019.09.24-20.46.44:346][545]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_0, compiling. 
[2019.09.24-20.46.44:357][545]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.46.44:376][545]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.46.44:382][545]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_0, compiling. 
[2019.09.24-20.46.44:536][558]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 27
[2019.09.24-20.46.44:547][559]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 26
[2019.09.24-20.46.44:547][559]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 25
[2019.09.24-20.46.44:547][559]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 24
[2019.09.24-20.46.44:547][559]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 23
[2019.09.24-20.46.44:572][562]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 22
[2019.09.24-20.46.44:572][562]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 21
[2019.09.24-20.46.44:572][562]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 20
[2019.09.24-20.46.44:572][562]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 19
[2019.09.24-20.46.44:572][562]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 18
[2019.09.24-20.46.44:572][562]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 17
[2019.09.24-20.46.44:572][562]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 16
[2019.09.24-20.46.44:615][567]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 15
[2019.09.24-20.46.44:615][567]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 14
[2019.09.24-20.46.44:615][567]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 13
[2019.09.24-20.46.44:615][567]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 12
[2019.09.24-20.46.44:641][570]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 11
[2019.09.24-20.46.44:641][570]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 10
[2019.09.24-20.46.44:641][570]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 9
[2019.09.24-20.46.44:641][570]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 8
[2019.09.24-20.46.44:678][574]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 7
[2019.09.24-20.46.44:678][574]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 6
[2019.09.24-20.46.44:678][574]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 5
[2019.09.24-20.46.44:678][574]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 4
[2019.09.24-20.46.44:707][577]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 3
[2019.09.24-20.46.44:707][577]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 2
[2019.09.24-20.46.44:724][579]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 1
[2019.09.24-20.46.44:753][582]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.46.44:753][582]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.46.44:753][582]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.46.44:753][582]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.46.44:754][582]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.46.44:754][582]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.46.44:754][582]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.46.44:763][583]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.46.44:763][583]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.46.44:763][583]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.46.44:763][583]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.46.44:763][583]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.46.44:763][583]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.46.44:764][583]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.46.44:764][583]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.09:341][935]LogAssetEditorManager: Opening Asset editor for VolumeTexture /Game/NewVolumeTexture.NewVolumeTexture
[2019.09.24-20.47.09:345][935]LogContentBrowser: Native class hierarchy updated for 'TextureEditor' in 0.0002 seconds. Added 1 classes and 2 folders.
[2019.09.24-20.47.23:468][593]LogTexture: Warning: VolumeTexture /Game/NewVolumeTexture.NewVolumeTexture contains no miplevels! Please delete.
[2019.09.24-20.47.24:803][750]Cmd: OBJ SAVEPACKAGE PACKAGE="/Game/NewVolumeTexture" FILE="../../../../../../Git/UEGym/TechArt/Content/NewVolumeTexture.uasset" SILENT=true
[2019.09.24-20.47.24:812][750]LogSavePackage: Moving '../../../../../../Git/UEGym/TechArt/Saved/NewVolumeTextureBB643B95422A63440CC0B7A2DC4CA847.tmp' to '../../../../../../Git/UEGym/TechArt/Content/NewVolumeTexture.uasset'
[2019.09.24-20.47.41:950][786]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.47.41:961][786]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.47.41:964][786]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_0, compiling. 
[2019.09.24-20.47.41:971][786]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.47.42:162][803]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 23
[2019.09.24-20.47.42:162][803]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 22
[2019.09.24-20.47.42:162][803]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 21
[2019.09.24-20.47.42:183][805]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 20
[2019.09.24-20.47.42:183][805]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 19
[2019.09.24-20.47.42:183][805]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 18
[2019.09.24-20.47.42:183][805]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 17
[2019.09.24-20.47.42:183][805]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 16
[2019.09.24-20.47.42:183][805]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 15
[2019.09.24-20.47.42:183][805]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 14
[2019.09.24-20.47.42:229][810]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 13
[2019.09.24-20.47.42:229][810]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 12
[2019.09.24-20.47.42:255][812]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 11
[2019.09.24-20.47.42:255][812]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 10
[2019.09.24-20.47.42:271][813]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 9
[2019.09.24-20.47.42:288][814]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 8
[2019.09.24-20.47.42:288][814]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 7
[2019.09.24-20.47.42:305][815]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 6
[2019.09.24-20.47.42:305][815]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 5
[2019.09.24-20.47.42:320][816]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 4
[2019.09.24-20.47.42:321][816]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 3
[2019.09.24-20.47.42:321][816]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 2
[2019.09.24-20.47.42:348][818]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.47.42:445][826]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.47.42:445][826]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.42:445][826]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.42:445][826]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.42:445][826]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.42:446][826]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.42:446][826]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.42:455][827]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.42:455][827]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.42:455][827]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.42:455][827]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.42:456][827]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.42:456][827]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.48:492][532]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.47.48:501][532]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureSample_1, compiling. 
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.47.48:508][532]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.47.48:512][532]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.47.48:518][532]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_0, compiling. 
[2019.09.24-20.47.48:524][532]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_0, compiling. 
[2019.09.24-20.47.48:529][532]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureSample_1, compiling. 
[2019.09.24-20.47.48:579][535]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.47.48:579][535]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.47.48:579][535]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.47.48:579][535]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.47.48:579][535]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.47.48:617][539]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.47.48:617][539]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.47.48:617][539]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.47.48:617][539]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.47.48:617][539]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.47.48:652][543]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.47.48:652][543]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.47.48:663][544]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.47.48:672][545]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.47.48:672][545]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.47.48:690][547]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.47.48:701][548]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 3
[2019.09.24-20.47.48:713][549]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 2
[2019.09.24-20.47.48:714][549]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 1
[2019.09.24-20.47.48:714][549]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.47.48:714][549]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.48:714][549]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.48:714][549]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.48:715][549]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.48:716][549]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.48:716][549]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.48:725][550]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.48:725][550]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.48:725][550]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.48:725][550]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.48:726][550]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.48:726][550]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.48:729][550]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.47.48:729][550]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.54:925][271]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.47.54:934][271]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_1, compiling. 
[2019.09.24-20.47.54:939][271]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_1, compiling. 
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.47.54:943][271]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.47.54:946][271]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.47.55:029][277]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.47.55:029][277]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.47.55:029][277]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.47.55:029][277]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.47.55:051][279]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.47.55:051][279]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.47.55:051][279]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.47.55:051][279]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.47.55:051][279]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.47.55:090][283]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 10
[2019.09.24-20.47.55:090][283]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 9
[2019.09.24-20.47.55:090][283]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 8
[2019.09.24-20.47.55:090][283]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 7
[2019.09.24-20.47.55:117][285]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.47.55:117][285]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.47.55:117][285]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.47.55:138][287]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.47.55:138][287]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.47.55:138][287]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.47.55:240][298]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.47.55:240][298]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.55:240][298]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.55:240][298]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.55:240][298]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.55:241][298]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.55:241][298]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.55:248][299]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.55:248][299]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.55:248][299]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.55:248][299]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.55:249][299]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.55:249][299]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.57:893][612]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.47.57:905][612]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.47.57:908][612]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.47.57:923][612]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_1, compiling. 
[2019.09.24-20.47.57:978][617]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 11
[2019.09.24-20.47.57:978][617]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 10
[2019.09.24-20.47.57:978][617]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 9
[2019.09.24-20.47.57:978][617]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 8
[2019.09.24-20.47.58:016][621]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 7
[2019.09.24-20.47.58:016][621]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 6
[2019.09.24-20.47.58:016][621]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 5
[2019.09.24-20.47.58:016][621]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 4
[2019.09.24-20.47.58:016][621]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 3
[2019.09.24-20.47.58:056][625]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 2
[2019.09.24-20.47.58:056][625]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 1
[2019.09.24-20.47.58:117][632]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.47.58:118][632]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.58:118][632]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.58:118][632]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.58:118][632]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.58:118][632]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.58:118][632]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.58:126][633]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.58:126][633]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.47.58:126][633]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.47.58:126][633]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.Texture2D_0,Material.Texture2D_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.47.58:127][633]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.47.58:127][633]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.47.58:127][633]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.47.58:127][633]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.47.59:798][829]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.47.59:812][829]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.47.59:815][829]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.47.59:830][829]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionTextureObject_1, compiling. 
[2019.09.24-20.47.59:880][834]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 11
[2019.09.24-20.47.59:880][834]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 10
[2019.09.24-20.47.59:880][834]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 9
[2019.09.24-20.47.59:880][834]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 8
[2019.09.24-20.47.59:912][837]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 7
[2019.09.24-20.47.59:912][837]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 6
[2019.09.24-20.47.59:912][837]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 5
[2019.09.24-20.47.59:912][837]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 4
[2019.09.24-20.47.59:912][837]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 3
[2019.09.24-20.47.59:950][841]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 2
[2019.09.24-20.47.59:950][841]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 1
[2019.09.24-20.48.00:019][848]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.00:019][848]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.00:019][848]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.00:019][848]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.00:019][848]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.00:020][848]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.48.00:020][848]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.48.00:027][849]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.00:027][849]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.00:027][849]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.00:027][849]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.00:028][849]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.48.00:028][849]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.48.00:028][849]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.00:028][849]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.09:877][ 25]LogMaterialEditor: Saving and Compiling material M_Cloud2
[2019.09.24-20.48.11:105][ 25]LogSlate: Window 'Warning: Compilation errors in this Material' being destroyed
[2019.09.24-20.48.11:402][ 25]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.48.11:428][ 25]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.48.11:429][ 25]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.48.11:429][ 25]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.48.11:429][ 25]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.48.11:437][ 25]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.11:448][ 25]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.11:481][ 25]LogUObjectHash: Compacting FUObjectHashTables data took   1.22ms
[2019.09.24-20.48.11:490][ 25]LogMaterial: Display: Missing cached shader map for material DebugViewMode MaterialTexCoordScale, compiling. 
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 29
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 28
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 27
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 26
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 25
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 24
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 23
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 22
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 21
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 20
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 18
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 16
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 14
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 12
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 10
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 9
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 8
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 7
[2019.09.24-20.48.11:615][ 25]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.11:615][ 25]TextureStreamingBuild: Display: Compiling optional shaders took 0.134 seconds.
[2019.09.24-20.48.11:652][ 25]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 6
[2019.09.24-20.48.11:652][ 25]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 5
[2019.09.24-20.48.11:652][ 25]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 4
[2019.09.24-20.48.11:652][ 25]LogUObjectHash: Compacting FUObjectHashTables data took   0.70ms
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 3
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 2
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 1
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Warning: Failed to compile Material /Game/M_Cloud2.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.48.11:755][ 25]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.48.11:757][ 25]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.11:757][ 25]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.11:757][ 25]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.11:757][ 25]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.11:757][ 25]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (;
}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1617 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1710 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1802 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1811 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1823 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1891 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1918 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1943 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1958 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.11:757][ 25]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) Expression expected

[2019.09.24-20.48.11:757][ 25]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1591): (2) '}' expected!

[2019.09.24-20.48.11:776][ 25]Cmd: OBJ SAVEPACKAGE PACKAGE="/Game/M_Cloud2" FILE="../../../../../../Git/UEGym/TechArt/Content/M_Cloud2.uasset" SILENT=true
[2019.09.24-20.48.11:789][ 25]LogSavePackage: Moving '../../../../../../Git/UEGym/TechArt/Saved/M_Cloud2821A527A416E0EECAF1FBFA615BD43E7.tmp' to '../../../../../../Git/UEGym/TechArt/Content/M_Cloud2.uasset'
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: invalid HTTP response code received. URL: https://datarouter.ol.epicgames.com/datarouter/api/v1/public/data?SessionID=%7B2274AE60-4DCE-AE6D-8030-24948B9F6EDE%7D&AppID=UEEditor.Rocket.Release&AppVersion=4.23.0-8386587%2B%2B%2BUE4%2BRelease-4.23&UserID=46d13a6741ca9bd6998950bfb3e409e5%7C894d73b3c48046cb86ff7e4e99bb4209%7C3520fb30-bffa-487f-84af-b0ae783e2152&AppEnvironment=datacollector-binary&UploadType=eteventstream, HTTP code: 0, content length: -1, actual payload size: 0
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: request failed, libcurl error: 0 (No error)
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 0 (Found bundle for host datarouter.ol.epicgames.com: 0x28da4ddff70 [can pipeline])
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 1 (Re-using existing connection! (#2) with host datarouter.ol.epicgames.com)
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 2 (Connected to datarouter.ol.epicgames.com (18.235.16.110) port 443 (#2))
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 3 (We are completely uploaded and fine)
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 4 (TLSv1.2 (IN), TLS alert, Client hello (1):)
[2019.09.24-20.48.15:310][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 5 (Connection died, retrying a fresh connect)
[2019.09.24-20.48.15:311][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 6 (necessary data rewind wasn't possible)
[2019.09.24-20.48.15:311][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 7 (Closing connection 2)
[2019.09.24-20.48.15:311][432]LogHttp: Warning: 0000028E03F33740: libcurl info message cache 8 (TLSv1.2 (OUT), TLS alert, Client hello (1):)
[2019.09.24-20.48.15:311][432]LogHttp: Warning: Retry exhausted on https://datarouter.ol.epicgames.com/datarouter/api/v1/public/data?SessionID=%7B2274AE60-4DCE-AE6D-8030-24948B9F6EDE%7D&AppID=UEEditor.Rocket.Release&AppVersion=4.23.0-8386587%2B%2B%2BUE4%2BRelease-4.23&UserID=46d13a6741ca9bd6998950bfb3e409e5%7C894d73b3c48046cb86ff7e4e99bb4209%7C3520fb30-bffa-487f-84af-b0ae783e2152&AppEnvironment=datacollector-binary&UploadType=eteventstream
[2019.09.24-20.48.48:609][418]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.48.48:622][418]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.48.48:625][418]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.48.48:633][418]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.48:814][435]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 23
[2019.09.24-20.48.48:826][436]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 22
[2019.09.24-20.48.48:826][436]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 21
[2019.09.24-20.48.48:826][436]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 20
[2019.09.24-20.48.48:826][436]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 19
[2019.09.24-20.48.48:826][436]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 18
[2019.09.24-20.48.48:859][440]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 17
[2019.09.24-20.48.48:859][440]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 16
[2019.09.24-20.48.48:859][440]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 15
[2019.09.24-20.48.48:859][440]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 14
[2019.09.24-20.48.48:859][440]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 13
[2019.09.24-20.48.48:859][440]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 12
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 11
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 10
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 9
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 8
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 7
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.48.48:897][444]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.48.48:933][448]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 6
[2019.09.24-20.48.48:933][448]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 5
[2019.09.24-20.48.48:933][448]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 4
[2019.09.24-20.48.48:933][448]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 3
[2019.09.24-20.48.48:933][448]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 2
[2019.09.24-20.48.48:969][452]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 1
[2019.09.24-20.48.49:047][461]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.49:047][461]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.48.49:047][461]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.48.49:047][461]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.48.49:047][461]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.49:047][461]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.48.49:047][461]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.48.49:055][462]MaterialEditorStats: Error: [SM5] (): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.48.49:055][462]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  error X3000: syntax error: unexpected token '('
[2019.09.24-20.48.49:055][462]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  error X3004: undeclared identifier 'p'
[2019.09.24-20.48.49:055][462]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.49:055][462]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.48.49:055][462]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.48.50:085][585]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.48.50:098][585]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.48.50:101][585]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.48.50:109][585]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.50:169][591]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 23
[2019.09.24-20.48.50:169][591]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 22
[2019.09.24-20.48.50:169][591]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 21
[2019.09.24-20.48.50:169][591]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 20
[2019.09.24-20.48.50:169][591]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 19
[2019.09.24-20.48.50:203][595]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 18
[2019.09.24-20.48.50:203][595]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 17
[2019.09.24-20.48.50:203][595]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 16
[2019.09.24-20.48.50:203][595]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 15
[2019.09.24-20.48.50:203][595]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 14
[2019.09.24-20.48.50:203][595]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 13
[2019.09.24-20.48.50:248][600]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 12
[2019.09.24-20.48.50:248][600]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 11
[2019.09.24-20.48.50:248][600]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 10
[2019.09.24-20.48.50:248][600]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 9
[2019.09.24-20.48.50:248][600]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 7
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 6
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 5
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 4
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 3
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.48.50:278][603]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.48.50:315][607]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 2
[2019.09.24-20.48.50:315][607]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 1
[2019.09.24-20.48.50:402][617]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.50:402][617]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.48.50:402][617]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.48.50:402][617]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.48.50:402][617]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.50:402][617]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.48.50:402][617]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.48.50:410][618]MaterialEditorStats: Error: [SM5] (): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.48.50:410][618]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  error X3000: syntax error: unexpected token '('
[2019.09.24-20.48.50:410][618]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  error X3004: undeclared identifier 'p'
[2019.09.24-20.48.50:410][618]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.50:410][618]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.48.50:410][618]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.48.54:872][153]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.48.54:886][153]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.48.54:889][153]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.48.54:897][153]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.54:958][159]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 23
[2019.09.24-20.48.54:958][159]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 22
[2019.09.24-20.48.54:958][159]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 21
[2019.09.24-20.48.54:958][159]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 20
[2019.09.24-20.48.54:958][159]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 19
[2019.09.24-20.48.54:993][163]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 18
[2019.09.24-20.48.54:993][163]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 17
[2019.09.24-20.48.54:993][163]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 16
[2019.09.24-20.48.54:993][163]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 15
[2019.09.24-20.48.54:993][163]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 14
[2019.09.24-20.48.55:029][167]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 13
[2019.09.24-20.48.55:029][167]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 12
[2019.09.24-20.48.55:049][169]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 11
[2019.09.24-20.48.55:049][169]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 10
[2019.09.24-20.48.55:049][169]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 9
[2019.09.24-20.48.55:069][171]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 8
[2019.09.24-20.48.55:069][171]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 7
[2019.09.24-20.48.55:069][171]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 6
[2019.09.24-20.48.55:069][171]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 5
[2019.09.24-20.48.55:070][171]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.55:070][171]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.55:095][174]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 4
[2019.09.24-20.48.55:095][174]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 3
[2019.09.24-20.48.55:095][174]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 2
[2019.09.24-20.48.55:095][174]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 1
[2019.09.24-20.48.55:199][186]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.55:199][186]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.55:199][186]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.55:199][186]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.55:199][186]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1616 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1709 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1801 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1810 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1822 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1890 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1917 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1942 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1957 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.55:200][186]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1596): (29) Unexpected type in declaration!

[2019.09.24-20.48.55:200][186]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1596): (29) Expression expected

[2019.09.24-20.48.55:200][186]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1596): (29) '}' expected!

[2019.09.24-20.48.55:207][187]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.55:207][187]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.55:207][187]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.55:207][187]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1616 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1709 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1801 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1810 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1822 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1890 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1917 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1942 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1957 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.55:208][187]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1596): (29) Unexpected type in declaration!

[2019.09.24-20.48.55:208][187]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1596): (29) Expression expected

[2019.09.24-20.48.55:208][187]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1596): (29) '}' expected!

[2019.09.24-20.48.59:385][681]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.48.59:401][682]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.48.59:472][690]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.48.59:472][690]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.48.59:472][690]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.48.59:494][692]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.48.59:494][692]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.48.59:494][692]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.48.59:494][692]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.48.59:591][699]LogAssetEditorManager: Opening Asset editor for Material /Game/M_PP_GaussianBlur.M_PP_GaussianBlur
[2019.09.24-20.48.59:595][699]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.48.59:643][699]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.48.59:649][699]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.48.59:660][699]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.48.59:660][699]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.48.59:660][699]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.48.59:660][699]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.48.59:660][699]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.48.59:660][699]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.48.59:660][699]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.48.59:682][699]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.48.59:682][699]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1589,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.59:682][699]LogShaderCompilers: Display: 	/Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.59:682][699]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.59:682][699]LogShaderCompilers: Display: 	(): Unhandled preprocessor directive (}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1616 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1709 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1801 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1810 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1822 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1890 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1917 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1942 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1957 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.59:683][699]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1596): (29) Unexpected type in declaration!

[2019.09.24-20.48.59:683][699]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1596): (29) Expression expected

[2019.09.24-20.48.59:683][699]LogShaderCompilers: Display: 	(): /Engine/Generated/Material.ush(1596): (29) '}' expected!

[2019.09.24-20.48.59:684][699]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1589,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.48.59:684][699]MaterialEditorStats: Error: [SM5] /Engine/Private/AtmosphereCommon.ush(547,16-85):  warning X3206: implicit truncation of vector type
[2019.09.24-20.48.59:684][699]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.48.59:684][699]MaterialEditorStats: Error: [SM5] (): Unhandled preprocessor directive (}





float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 1616 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 1709 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;

}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 1801 "/Engine/Generated/Material.ush"
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1810 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 1822 "/Engine/Generated/Material.ush"
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float3  GetMaterialWorldDisplacement(FMaterialTessellationParameters Parameters)
{
	return  float3 (0.00000000,0.00000000,0.00000000);;
}

float  GetMaterialMaxDisplacement()
{
return 0.00000;
}

float  GetMaterialTessellationMultiplier(FMaterialTessellationParameters Parameters)
{
	return 1.00000000;;
}


float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}
#line 1890 "/Engine/Generated/Material.ush"
float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 1917 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{



	PixelMaterialInputs.Normal =  float3 (0.00000000,0.00000000,1.00000000);



	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 1942 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 1957 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local0 = CustomExpression0(Parameters,Material.Texture2D_0,Material.Texture2D_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler,Material.VolumeTexture_0,Material.VolumeTexture_0Sampler);
	float3  Local1 = (Local0 + Material.VectorExpressions[1].rgb);

	PixelMaterialInputs.EmissiveColor = Local1;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction =  float2 ( float2 ( float2 (1.00000000,0.00000000).r,0).r,Material.ScalarExpressions[0].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;

}
#line 1954 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float RandCos = cos(dot(floor(SvPosition.xy), float2(347.83451793,3343.28371963)));
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 1997 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0f / 255.0f);

}

void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);





		clip(GetMaterialOpacity(PixelMaterialInputs) - 1.0 / 255.0 - GetMaterialOpacityMaskClipValue());

}


void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 2059 "/Engine/Generated/Material.ush"
}
#line 2098 "/Engine/Generated/Material.ush"
	float  GetFloatFacingSign( bool  bIsFrontFace)
	{
		return bIsFrontFace ? +1 : -1;
	}









void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = TranslatedWorldPosition.xyz - ResolvedView.PreViewTranslation.xyz;
#line 2131 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;








		Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
#line 2147 "/Engine/Generated/Material.ush"
	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 2167 "/Engine/Generated/Material.ush"
	CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 2247 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition += MaterialParameters.CameraVector * PixelDepthOffset;

	OutDepth = DeviceDepth;

	return PixelDepthOffset;
}
#line 9 "/Engine/Private/DepthOnlyVertexShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/LocalVertexFactory.ush"
#line 7 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"




float3 TransformLocalToWorld(float3 LocalPosition, uint PrimitiveId)
{



	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	return  ((LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz) + LocalToWorld[3].xyz);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, uint PrimitiveId)
{
	float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	float3 RotatedPosition = LocalToWorld[0].xyz * LocalPosition.xxx + LocalToWorld[1].xyz * LocalPosition.yyy + LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

float3 RotateLocalToWorld(float3 LocalDirection, uint PrimitiveId)
{
	const float4x4 LocalToWorld = GetPrimitiveData(PrimitiveId).LocalToWorld;
	const float3 InvScale = GetPrimitiveData(PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * Primitive.LocalToWorld[0].xyz * LocalDirection.xxx +
		InvScale.y * Primitive.LocalToWorld[1].xyz * LocalDirection.yyy +
		InvScale.z * Primitive.LocalToWorld[2].xyz * LocalDirection.zzz;
}










float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 8 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LocalVertexFactoryCommon.ush"
#line 11 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 38 "/Engine/Private/LocalVertexFactoryCommon.ush"
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
#line 43 "/Engine/Private/LocalVertexFactoryCommon.ush"
};
#line 66 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{
#line 80 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 112 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
#line 129 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
}

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

void SetLightmapDataIndex(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint LightmapDataIndex)
{
#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
}
#line 9 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "LightmapData.ush"
#line 12 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};





FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = View.LightmapSceneData[LightmapDataBaseOffset + 0];
	LightmapData.InvUniformPenumbraSizes = View.LightmapSceneData[LightmapDataBaseOffset + 1];
	LightmapData.LightMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 2];
	LightmapData.ShadowMapCoordinateScaleBias = View.LightmapSceneData[LightmapDataBaseOffset + 3];
	LightmapData.LightMapScale[0] = View.LightmapSceneData[LightmapDataBaseOffset + 4];
	LightmapData.LightMapScale[1] = View.LightmapSceneData[LightmapDataBaseOffset + 5];
	LightmapData.LightMapAdd[0] = View.LightmapSceneData[LightmapDataBaseOffset + 6];
	LightmapData.LightMapAdd[1] = View.LightmapSceneData[LightmapDataBaseOffset + 7];
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 8]);
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 9]);

	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(View.LightmapSceneData[LightmapDataBaseOffset + 10 + i]);
	}

	return LightmapData;
}
#line 10 "/Engine/Private/LocalVertexFactory.ush"
#line 15 "/Engine/Private/LocalVertexFactory.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 16 "/Engine/Private/LocalVertexFactory.ush"
#line 97 "/Engine/Private/LocalVertexFactory.ush"
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
#line 106 "/Engine/Private/LocalVertexFactory.ush"
	uint InstanceOffset;
#line 113 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 169 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE13;
#line 182 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 224 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
#line 236 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 245 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 252 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal : ATTRIBUTE2;
#line 265 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId : ATTRIBUTE1;
#line 274 "/Engine/Private/LocalVertexFactory.ush"
	uint VertexId : SV_VertexID;

};
#line 281 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	float3x3  TangentToLocal;
	float3x3  TangentToWorld;
	float  TangentToWorldSign;

	float4  Color;
#line 307 "/Engine/Private/LocalVertexFactory.ush"
	uint PrimitiveId;
};
#line 461 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
#line 480 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4  TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color =  float4 (1,1,1,1);
#line 492 "/Engine/Private/LocalVertexFactory.ush"
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 508 "/Engine/Private/LocalVertexFactory.ush"
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);

	return Result;
}

float3x3  CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{
	float3x3  LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	float3  InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition,  float3x3  TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;


	Result.TangentToWorld = Intermediates.TangentToWorld;
#line 548 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrevFrameLocalToWorld = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;


	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2];
#line 588 "/Engine/Private/LocalVertexFactory.ush"
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}
#line 693 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)

{
#line 710 "/Engine/Private/LocalVertexFactory.ush"
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);

}

float3x3  CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	float3x3  Result;


	float3  TangentInputX = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 0].xyz;
	float4  TangentInputZ = LocalVF.VertexFetch_PackedTangentsBuffer[2 * (LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) + 1].xyzw;
#line 730 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentX =  (TangentInputX) ;
	float4  TangentZ =  (TangentInputZ) ;


	TangentSign = TangentZ.w;
#line 745 "/Engine/Private/LocalVertexFactory.ush"
	float3  TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;




	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

float3x3  CalcTangentToWorld(FVertexFactoryIntermediates Intermediates,  float3x3  TangentToLocal)
{








	float3x3  TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;


	Intermediates.PrimitiveId = Input.PrimitiveId;
#line 783 "/Engine/Private/LocalVertexFactory.ush"
	Intermediates.Color = LocalVF.VertexFetch_ColorComponentsBuffer[(LocalVF.VertexFetch_Parameters[ 3 ] + Input.VertexId) & LocalVF.VertexFetch_Parameters[ 0 ]]  .bgra ;
#line 816 "/Engine/Private/LocalVertexFactory.ush"
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates,Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;
#line 848 "/Engine/Private/LocalVertexFactory.ush"
	return Intermediates;
}
#line 858 "/Engine/Private/LocalVertexFactory.ush"
float3x3  VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}


float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{










	return CalcWorldPosition(Input.Position, Intermediates.PrimitiveId);

}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;



	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
#line 953 "/Engine/Private/LocalVertexFactory.ush"
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#line 963 "/Engine/Private/LocalVertexFactory.ush"
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);

	return Interpolants;
}


float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 982 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}


float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;


	uint PrimitiveId = Input.PrimitiveId;
#line 1000 "/Engine/Private/LocalVertexFactory.ush"
	return CalcWorldPosition(Position, PrimitiveId);

}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float3 Normal = Input.Normal.xyz;


	uint PrimitiveId = Input.PrimitiveId;
#line 1018 "/Engine/Private/LocalVertexFactory.ush"
	return RotateLocalToWorld(Normal, PrimitiveId);

}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}
#line 1034 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = GetPrimitiveData(Intermediates.PrimitiveId).PreviousLocalToWorld;
	PreviousLocalToWorldTranslated[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldTranslated[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldTranslated[3][2] += ResolvedView.PrevPreViewTranslation.z;
#line 1063 "/Engine/Private/LocalVertexFactory.ush"
	return mul(Input.Position, PreviousLocalToWorldTranslated);

}
#line 1196 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + ResolvedView.PreViewTranslation.xyz, ObjectWorldPositionAndRadius.w);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 10 "/Engine/Private/DepthOnlyVertexShader.usf"



struct FDepthOnlyVSToPS
{
	float4 Position : SV_POSITION;
#line 22 "/Engine/Private/DepthOnlyVertexShader.usf"
		FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
		float4 PixelPosition : TEXCOORD6;

};
#line 92 "/Engine/Private/DepthOnlyVertexShader.usf"
void Main(
	FVertexFactoryInput Input,

	out  FDepthOnlyVSToPS  Output
#line 107 "/Engine/Private/DepthOnlyVertexShader.usf"
	)
{









	ResolvedView = ResolveView();


	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPositionExcludingWPO = WorldPos;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);





	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}






	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);




		Output.Position =  (mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));

	}
#line 179 "/Engine/Private/DepthOnlyVertexShader.usf"
	Output.FactoryInterpolants =  VertexFactoryGetInterpolantsVSToPS (Input, VFIntermediates, VertexParameters);
#line 193 "/Engine/Private/DepthOnlyVertexShader.usf"
		Output.PixelPosition = WorldPos;
#line 201 "/Engine/Private/DepthOnlyVertexShader.usf"
	;
}
); HlslParser requires preprocessed input!

[2019.09.24-20.48.59:685][699]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1596): (29) Unexpected type in declaration!

[2019.09.24-20.48.59:685][699]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1596): (29) Expression expected

[2019.09.24-20.48.59:685][699]MaterialEditorStats: Error: [SM5] (): /Engine/Generated/Material.ush(1596): (29) '}' expected!

[2019.09.24-20.49.00:106][735]MaterialEditorStats: Base pass shader without light map: 32 instructions
[2019.09.24-20.49.00:106][735]MaterialEditorStats: Base pass vertex shader: 40 instructions
[2019.09.24-20.49.00:106][735]MaterialEditorStats: Texture samplers: 1/16
[2019.09.24-20.49.00:106][735]MaterialEditorStats: Texture Lookups (Est.): VS(0), PS(1)
[2019.09.24-20.49.01:289][873]LogSlate: Took 0.000107 seconds to synchronously load lazily loaded font '../../../Engine/Content/Slate/Fonts/Roboto-Italic.ttf' (157K)
[2019.09.24-20.49.09:884][898]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.49.09:896][899]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.49.09:896][899]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.49.09:896][899]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.49.09:896][899]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.49.09:896][899]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.49.09:896][899]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.49.09:896][899]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.49.09:989][909]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_PP_GaussianBlur for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.49.09:989][909]LogShaderCompilers: Display: 	/Engine/Generated/Material.ush(1600,8):  err0r X3000: syntax error: unexpected token '#'
[2019.09.24-20.49.09:989][909]LogShaderCompilers: Display: 	/Engine/Private/PostProcessMaterialShaders.usf(113,23-50):  warning X3206: implicit truncation of vector type
[2019.09.24-20.49.09:999][910]MaterialEditorStats: Error: [SM5] /Engine/Generated/Material.ush(1600,8):  error X3000: syntax error: unexpected token '#'
[2019.09.24-20.49.09:999][910]MaterialEditorStats: Error: [SM5] /Engine/Private/PostProcessMaterialShaders.usf(113,23-50):  warning X3206: implicit truncation of vector type
[2019.09.24-20.49.35:968][270]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.49.35:974][270]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.49.35:987][271]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.49.35:987][271]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.49.35:987][271]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.49.35:987][271]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.49.35:987][271]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.49.35:987][271]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.49.35:987][271]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.49.36:503][323]MaterialEditorStats: Base pass shader without light map: 32 instructions
[2019.09.24-20.49.36:503][323]MaterialEditorStats: Base pass vertex shader: 40 instructions
[2019.09.24-20.49.36:503][323]MaterialEditorStats: Texture samplers: 1/16
[2019.09.24-20.49.36:503][323]MaterialEditorStats: Texture Lookups (Est.): VS(0), PS(1)
[2019.09.24-20.49.38:558][566]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.49.38:577][568]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.49.38:577][568]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.49.38:577][568]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.49.38:577][568]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.49.38:577][568]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.49.38:577][568]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.49.38:577][568]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.49.38:649][576]LogMaterialEditor: Saving and Compiling material M_PP_GaussianBlur
[2019.09.24-20.49.38:967][576]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.49.38:989][576]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.49.38:989][576]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.49.38:989][576]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.49.38:989][576]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.49.38:989][576]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.49.38:989][576]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.49.38:989][576]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.49.38:989][576]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.49.38:997][576]LogMaterial: Display: Missing cached shader map for material M_PP_GaussianBlur, compiling. 
[2019.09.24-20.49.39:025][576]LogUObjectHash: Compacting FUObjectHashTables data took   1.13ms
[2019.09.24-20.49.39:026][576]TextureStreamingBuild: Display: Compiling optional shaders took 0.000 seconds.
[2019.09.24-20.49.39:047][576]LogUObjectHash: Compacting FUObjectHashTables data took   0.64ms
[2019.09.24-20.49.39:055][576]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 8
[2019.09.24-20.49.39:055][576]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 7
[2019.09.24-20.49.39:055][576]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 6
[2019.09.24-20.49.39:055][576]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 5
[2019.09.24-20.49.39:055][576]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 4
[2019.09.24-20.49.39:614][576]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 3
[2019.09.24-20.49.39:614][576]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 2
[2019.09.24-20.49.39:614][576]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.49.39:632][576]Cmd: OBJ SAVEPACKAGE PACKAGE="/Game/M_PP_GaussianBlur" FILE="../../../../../../Git/UEGym/TechArt/Content/M_PP_GaussianBlur.uasset" SILENT=true
[2019.09.24-20.49.39:647][576]LogSavePackage: Moving '../../../../../../Git/UEGym/TechArt/Saved/M_PP_GaussianBlurFF8F5D03483160C35F950EA8D2D1C311.tmp' to '../../../../../../Git/UEGym/TechArt/Content/M_PP_GaussianBlur.uasset'
[2019.09.24-20.49.44:591][158]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.49.44:612][158]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.49.44:615][158]LogMaterial: Display: Missing cached shader map for material FMatExpressionPreview MaterialExpressionCustom_1, compiling. 
[2019.09.24-20.49.44:623][158]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.49.44:684][164]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 23
[2019.09.24-20.49.44:684][164]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 22
[2019.09.24-20.49.44:684][164]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 21
[2019.09.24-20.49.44:684][164]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 20
[2019.09.24-20.49.44:684][164]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 19
[2019.09.24-20.49.44:684][164]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 18
[2019.09.24-20.49.44:731][169]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 17
[2019.09.24-20.49.44:731][169]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 16
[2019.09.24-20.49.44:732][169]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 15
[2019.09.24-20.49.44:732][169]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 14
[2019.09.24-20.49.44:732][169]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 13
[2019.09.24-20.49.44:766][173]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 12
[2019.09.24-20.49.44:766][173]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 11
[2019.09.24-20.49.44:767][173]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 10
[2019.09.24-20.49.44:767][173]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 9
[2019.09.24-20.49.44:767][173]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 8
[2019.09.24-20.49.44:767][173]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 7
[2019.09.24-20.49.44:768][173]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.49.44:768][173]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.49.44:768][173]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.49.44:768][173]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.49.44:813][178]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 6
[2019.09.24-20.49.44:813][178]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 5
[2019.09.24-20.49.44:813][178]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 4
[2019.09.24-20.49.44:813][178]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 3
[2019.09.24-20.49.44:813][178]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 2
[2019.09.24-20.49.44:813][178]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 1
[2019.09.24-20.49.44:918][190]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.49.44:918][190]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.49.44:918][190]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.49.44:918][190]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.49.44:918][190]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.49.44:918][190]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.49.44:918][190]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.49.44:926][191]MaterialEditorStats: Error: [SM5] (): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.49.44:926][191]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  error X3000: syntax error: unexpected token '('
[2019.09.24-20.49.44:926][191]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  error X3004: undeclared identifier 'p'
[2019.09.24-20.49.44:926][191]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.49.44:926][191]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.49.44:926][191]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.49.46:670][396]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.49.46:687][397]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.49.46:730][402]LogMaterialEditor: Applying material M_Cloud2
[2019.09.24-20.49.47:014][402]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.49.47:014][402]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.49.47:014][402]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.49.47:014][402]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 4
[2019.09.24-20.49.47:014][402]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 3
[2019.09.24-20.49.47:014][402]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.49.47:014][402]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.49.47:036][402]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.49.47:062][402]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.49.47:067][402]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.49.47:078][402]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.49.47:108][402]LogUObjectHash: Compacting FUObjectHashTables data took   0.57ms
[2019.09.24-20.49.47:116][402]LogMaterial: Display: Missing cached shader map for material DebugViewMode MaterialTexCoordScale, compiling. 
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 29
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 28
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 27
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 26
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 25
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 24
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 23
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 22
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 21
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 20
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 18
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 16
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 14
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 12
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 10
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 8
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 7
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 6
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 5
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Warning: Failed to compile Material  for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.49.47:254][402]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.49.47:257][402]TextureStreamingBuild: Display: Compiling optional shaders took 0.148 seconds.
[2019.09.24-20.49.47:281][402]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 4
[2019.09.24-20.49.47:281][402]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 3
[2019.09.24-20.49.47:281][402]LogUObjectHash: Compacting FUObjectHashTables data took   0.66ms
[2019.09.24-20.49.47:287][402]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.49.47:287][402]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.49.47:287][402]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.49.47:287][402]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.49.47:287][402]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.49.47:287][402]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.49.47:287][402]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.49.47:302][403]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 2
[2019.09.24-20.49.47:325][405]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 1
[2019.09.24-20.49.47:379][411]LogShaderCompilers: Warning: Failed to compile Material /Game/M_Cloud2.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.49.47:379][411]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.49.47:379][411]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.49.47:379][411]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.49.47:379][411]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.49.47:379][411]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.49.47:379][411]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.49.47:387][412]MaterialEditorStats: Error: [SM5] (): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.49.47:387][412]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  error X3000: syntax error: unexpected token '('
[2019.09.24-20.49.47:387][412]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  error X3004: undeclared identifier 'p'
[2019.09.24-20.49.47:387][412]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.49.47:387][412]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.49.47:387][412]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.49.48:036][489]LogMaterialEditor: Saving and Compiling material M_Cloud2
[2019.09.24-20.49.48:052][489]Cmd: OBJ SAVEPACKAGE PACKAGE="/Game/M_Cloud2" FILE="../../../../../../Git/UEGym/TechArt/Content/M_Cloud2.uasset" SILENT=true
[2019.09.24-20.49.48:065][489]LogSavePackage: Moving '../../../../../../Git/UEGym/TechArt/Saved/M_Cloud2C464B81C404CB7E004A1BD90EC303C6D.tmp' to '../../../../../../Git/UEGym/TechArt/Content/M_Cloud2.uasset'
[2019.09.24-20.52.15:630][ 70]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 19
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 17
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 16
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 15
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 14
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 13
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 12
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 11
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 10
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (11/13): shaders left to compile 9
[2019.09.24-20.52.15:643][ 71]LogShaderCompilers: Display: Worker (12/13): shaders left to compile 8
[2019.09.24-20.52.15:833][ 89]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 7
[2019.09.24-20.52.15:833][ 89]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 6
[2019.09.24-20.52.15:843][ 90]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 5
[2019.09.24-20.52.15:843][ 90]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 4
[2019.09.24-20.52.15:843][ 90]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 3
[2019.09.24-20.52.15:843][ 90]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 2
[2019.09.24-20.52.15:843][ 90]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 1
[2019.09.24-20.52.15:948][102]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.52.15:948][102]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.52.15:948][102]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.52.15:948][102]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.52.15:948][102]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.52.15:948][102]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.52.15:948][102]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.52.15:955][103]MaterialEditorStats: Error: [SM5] (): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.52.15:955][103]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  error X3000: syntax error: unexpected token '('
[2019.09.24-20.52.15:955][103]MaterialEditorStats: Error: [SM5] D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  error X3004: undeclared identifier 'p'
[2019.09.24-20.52.15:955][103]MaterialEditorStats: Error: [SM5] (): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.52.15:955][103]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.52.15:955][103]MaterialEditorStats: Error: [SM5] (): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.52.17:546][293]LogMaterial: Display: Missing cached shader map for material M_Cloud2, compiling. 
[2019.09.24-20.52.17:559][294]LogShaderCompilers: Display: Worker (1/13): shaders left to compile 20
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (2/13): shaders left to compile 18
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (3/13): shaders left to compile 16
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (4/13): shaders left to compile 14
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (5/13): shaders left to compile 12
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (6/13): shaders left to compile 10
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (7/13): shaders left to compile 8
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (8/13): shaders left to compile 6
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (9/13): shaders left to compile 4
[2019.09.24-20.52.17:560][294]LogShaderCompilers: Display: Worker (10/13): shaders left to compile 2
[2019.09.24-20.52.17:762][316]LogShaderCompilers: Warning: Failed to compile Material /Engine/Transient.M_Cloud2 for platform PCD3D_SM5, Default Material will be used in game.
[2019.09.24-20.52.17:762][316]LogShaderCompilers: Display: 	(): Virtual shader source file name "D:/Git/UEGym/TechArt/Shaders/Cloud3.usf" should be absolute from the virtual root directory "/".
[2019.09.24-20.52.17:762][316]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1,11):  err0r X3000: syntax error: unexpected token '('
[2019.09.24-20.52.17:763][316]LogShaderCompilers: Display: 	D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(3,1):  err0r X3004: undeclared identifier 'p'
[2019.09.24-20.52.17:763][316]LogShaderCompilers: Display: 	(): RemoveUnusedOutputs: Failed to compile!
[2019.09.24-20.52.17:763][316]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) ';' expected!


[2019.09.24-20.52.17:763][316]LogShaderCompilers: Display: 	(): D:/Git/UEGym/TechArt/Shaders/Cloud3.usf(1): (12) '}' expected!

[2019.09.24-20.52.40:597][587]LogUObjectHash: Compacting FUObjectHashTables data took   1.20ms
[2019.09.24-20.52.40:681][587]LogWorld: UWorld::CleanupWorld for World_1, bSessionEnded=true, bCleanupResources=true
[2019.09.24-20.52.40:686][587]LogSlate: Window 'M_PP_GaussianBlur' being destroyed
[2019.09.24-20.52.40:719][587]LogWorld: UWorld::CleanupWorld for World_3, bSessionEnded=true, bCleanupResources=true
[2019.09.24-20.52.40:725][587]LogSlate: Window 'TechArt - Unreal Editor' being destroyed
[2019.09.24-20.52.40:726][587]LogWindowsTextInputMethodSystem: Display: IME system now deactivated.
[2019.09.24-20.52.40:787][588]Cmd: QUIT_EDITOR
[2019.09.24-20.52.40:806][588]LogExit: Preparing to exit.
[2019.09.24-20.52.41:155][588]LogWorld: UWorld::CleanupWorld for World_2, bSessionEnded=true, bCleanupResources=true
[2019.09.24-20.52.41:155][588]LogWorld: UWorld::CleanupWorld for World_0, bSessionEnded=true, bCleanupResources=true
[2019.09.24-20.52.41:159][588]LogDemo: Cleaned up 0 splitscreen connections with owner deletion
[2019.09.24-20.52.41:164][588]LogWorld: UWorld::CleanupWorld for None, bSessionEnded=true, bCleanupResources=true
[2019.09.24-20.52.41:165][588]LogExit: Editor shut down
[2019.09.24-20.52.41:165][588]LogExit: Transaction tracking system shut down
[2019.09.24-20.52.41:365][588]LogExit: Object subsystem successfully closed.
[2019.09.24-20.52.41:383][588]LogShaderCompilers: Display: Shaders left to compile 0
[2019.09.24-20.52.41:390][588]LogModuleManager: Shutting down and abandoning module TextureEditor (670)
[2019.09.24-20.52.41:390][588]LogModuleManager: Shutting down and abandoning module HierarchicalLODOutliner (668)
[2019.09.24-20.52.41:390][588]LogModuleManager: Shutting down and abandoning module SceneOutliner (666)
[2019.09.24-20.52.41:390][588]LogModuleManager: Shutting down and abandoning module AddContentDialog (664)
[2019.09.24-20.52.41:390][588]LogModuleManager: Shutting down and abandoning module WidgetCarousel (663)
[2019.09.24-20.52.41:390][588]LogModuleManager: Shutting down and abandoning module EditorWidgets (660)
[2019.09.24-20.52.41:390][588]LogModuleManager: Shutting down and abandoning module CollectionManager (658)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module StatsViewer (656)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module VirtualTexturingEditor (654)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module FoliageEdit (652)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module LandscapeEditor (650)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MeshPaintMode (648)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module SceneDepthPickerMode (646)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module ActorPickerMode (644)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module GeometryMode (642)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module TextureAlignMode (640)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module BspMode (638)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module PIEPreviewDeviceProfileSelector (636)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module SequenceRecorderSections (634)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module AutomationWorker (632)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module OculusMR (630)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module AudioCaptureEditor (628)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MatineeToLevelSequence (626)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module LevelSequenceEditor (624)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module PlacementMode (623)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MaterialEditor (622)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module ActorSequenceEditor (618)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module WmfMediaFactory (616)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module WmfMediaEditor (614)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module WebMMediaFactory (612)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module WebMMediaEditor (610)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module WebMMedia (608)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MediaPlayerEditor (606)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MediaCompositingEditor (604)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module SequenceRecorder (603)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module OpenExrWrapper (600)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module ImgMediaFactory (598)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module ImgMediaEditor (596)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module AvfMediaFactory (594)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module AvfMediaEditor (592)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module AndroidMediaFactory (590)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module AndroidMediaEditor (588)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MagicLeapCameraPreviewFactory (586)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MagicLeapMediaCodecFactory (584)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MagicLeapMediaFactory (582)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MagicLeapMediaEditor (580)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module CharacterAI (578)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module SmartSnapping (576)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module SessionServices (574)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module MeshPaint (572)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module ViewportSnapping (570)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module ViewportInteraction (568)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module ClothPainter (566)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module SkeletalMeshEditor (565)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module LogVisualizer (562)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module IntroTutorials (560)
[2019.09.24-20.52.41:391][588]LogModuleManager: Shutting down and abandoning module GameProjectGeneration (559)
[2019.09.24-20.52.41:392][588]LogModuleManager: Shutting down and abandoning module LuminPlatformEditor (556)
[2019.09.24-20.52.41:392][588]LogModuleManager: Shutting down and abandoning module IOSPlatformEditor (554)
[2019.09.24-20.52.41:392][588]LogModuleManager: Shutting down and abandoning module HTML5PlatformEditor (552)
[2019.09.24-20.52.41:392][588]LogModuleManager: Shutting down and abandoning module AndroidPlatformEditor (550)
[2019.09.24-20.52.41:392][588]LogModuleManager: Shutting down and abandoning module AndroidDeviceDetection (549)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module WindowsPlatformEditor (546)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module LuminRuntimeSettings (544)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module IOSRuntimeSettings (542)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module AndroidRuntimeSettings (540)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module TimeManagementEditor (538)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module InputBindingEditor (536)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module MergeActors (534)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module LocalizationDashboard (532)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module LocalizationService (531)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module HardwareTargeting (528)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module DeviceProfileEditor (526)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module UndoHistory (524)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module XmlParser (522)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module Blutility (520)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module ProjectSettingsViewer (518)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module ProjectTargetPlatformEditor (517)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module EditorSettingsViewer (514)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module SettingsEditor (512)
[2019.09.24-20.52.42:775][588]LogModuleManager: Shutting down and abandoning module ProjectLauncher (510)
[2019.09.24-20.52.42:776][588]LogModuleManager: Shutting down and abandoning module SessionFrontend (508)
[2019.09.24-20.52.42:776][588]LogModuleManager: Shutting down and abandoning module ProfilerClient (506)
[2019.09.24-20.52.42:776][588]LogModuleManager: Shutting down and abandoning module DeviceManager (504)
[2019.09.24-20.52.42:776][588]LogModuleManager: Shutting down and abandoning module TargetDeviceServices (503)
[2019.09.24-20.52.42:820][588]LogModuleManager: Shutting down and abandoning module AutomationController (500)
[2019.09.24-20.52.42:820][588]LogModuleManager: Shutting down and abandoning module AutomationWindow (498)
[2019.09.24-20.52.42:820][588]LogModuleManager: Shutting down and abandoning module Layers (496)
[2019.09.24-20.52.42:820][588]LogModuleManager: Shutting down and abandoning module ComponentVisualizers (494)
[2019.09.24-20.52.42:820][588]LogModuleManager: Shutting down and abandoning module DetailCustomizations (492)
[2019.09.24-20.52.42:821][588]LogModuleManager: Shutting down and abandoning module PackagesDialog (490)
[2019.09.24-20.52.42:821][588]LogModuleManager: Shutting down and abandoning module AnimationBlueprintEditor (488)
[2019.09.24-20.52.42:821][588]LogModuleManager: Shutting down and abandoning module Persona (486)
[2019.09.24-20.52.42:821][588]LogModuleManager: Shutting down and abandoning module AdvancedPreviewScene (485)
[2019.09.24-20.52.42:821][588]LogModuleManager: Shutting down and abandoning module AnimGraph (483)
[2019.09.24-20.52.42:821][588]LogModuleManager: Shutting down and abandoning module Kismet (480)
[2019.09.24-20.52.42:822][588]LogModuleManager: Shutting down and abandoning module KismetWidgets (479)
[2019.09.24-20.52.42:822][588]LogModuleManager: Shutting down and abandoning module GraphEditor (476)
[2019.09.24-20.52.42:822][588]LogModuleManager: Shutting down and abandoning module StructViewer (474)
[2019.09.24-20.52.42:823][588]LogModuleManager: Shutting down and abandoning module ClassViewer (472)
[2019.09.24-20.52.42:823][588]LogModuleManager: Shutting down and abandoning module Toolbox (470)
[2019.09.24-20.52.42:823][588]LogModuleManager: Shutting down and abandoning module ModuleUI (468)
[2019.09.24-20.52.42:823][588]LogModuleManager: Shutting down and abandoning module MovieSceneTools (466)
[2019.09.24-20.52.42:823][588]LogModuleManager: Shutting down and abandoning module OutputLog (464)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module GammaUI (462)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module Documentation (460)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module LiveCoding (458)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module LevelSequence (456)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module MovieSceneTracks (454)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module MovieScene (452)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module StreamingPauseRendering (450)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module LauncherPlatform (448)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module AnalyticsET (446)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module PortalServices (444)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module PortalRpc (442)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module MessagingRpc (440)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module AIModule (438)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module GameplayDebugger (437)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module AITestSuite (435)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module NavigationSystem (433)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module DesktopPlatform (430)
[2019.09.24-20.52.42:827][588]LogModuleManager: Shutting down and abandoning module ImageWriteQueue (428)
[2019.09.24-20.52.42:829][588]LogModuleManager: Shutting down and abandoning module ProfilerService (426)
[2019.09.24-20.52.43:018][588]LogModuleManager: Shutting down and abandoning module TaskGraph (424)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module ScreenshotTools (422)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module SteamVRController (420)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module ProceduralMeshComponentEditor (418)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module ProceduralMeshComponent (416)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module OculusEditor (414)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module OculusInput (412)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module MobilePatchingUtils (410)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module EditableMesh (408)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module CustomMeshComponent (406)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module CableComponent (404)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module AudioCapture (402)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module ArchVisCharacter (400)
[2019.09.24-20.52.43:019][588]LogModuleManager: Shutting down and abandoning module AppleImageUtilsBlueprintSupport (398)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module AppleImageUtils (396)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module AndroidPermission (394)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module NUTUnrealEngine4 (392)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module NetcodeUnitTest (390)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module MediaCompositing (388)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module ImgMedia (386)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module MagicLeapHelperVulkan (384)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module MagicLeapHelperOpenGL (382)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module MagicLeapAudio (380)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module HTML5Networking (378)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module GeometryCacheTracks (376)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module GeometryCacheSequencer (374)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module BackChannel (372)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module AutomationUtilsEditor (370)
[2019.09.24-20.52.43:020][588]LogModuleManager: Shutting down and abandoning module AutomationUtils (368)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module AlembicImporter (366)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module AlembicLibrary (365)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module GeometryCache (364)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module GeometryCacheEd (363)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module VariantManagerContent (358)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module DatasmithContentEditor (356)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module SpeedTreeImporter (354)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module PluginBrowser (352)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module MobileLauncherProfileWizard (350)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module MaterialAnalyzer (348)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module CurveEditorTools (346)
[2019.09.24-20.52.43:021][588]LogModuleManager: Shutting down and abandoning module CurveEditor (345)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module CryptoKeysOpenSSL (342)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module CryptoKeys (340)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module VisualStudioSourceCodeAccess (338)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module VisualStudioCodeSourceCodeAccess (336)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module UObjectPlugin (334)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module SubversionSourceControl (332)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module PerforceSourceControl (330)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module GitSourceControl (328)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module SourceControl (327)
[2019.09.24-20.52.43:022][588]LogModuleManager: Shutting down and abandoning module CLionSourceCodeAccess (324)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module AnimationSharingEd (322)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module ActorLayerUtilitiesEditor (320)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module ActorLayerUtilities (318)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module LightPropagationVolumeEditor (316)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module PaperTiledImporter (314)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module PaperSpriteSheetImporter (312)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module Paper2DEditor (310)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module SignificanceManager (308)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module RuntimePhysXCooking (306)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module PhysXVehiclesEditor (304)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module LocationServicesBPLibrary (300)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module ActorSequence (298)
[2019.09.24-20.52.43:023][588]LogModuleManager: Shutting down and abandoning module UdpMessaging (296)
[2019.09.24-20.52.43:124][588]LogModuleManager: Shutting down and abandoning module TcpMessaging (294)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module MagicLeapIdentity (292)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module MagicLeapSecureStorage (290)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module MagicLeapHandTracking (288)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module MagicLeapEyeTracker (286)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module MagicLeapController (284)
[2019.09.24-20.52.43:225][588]LogSlate: Slate User Destroyed.  User Index 0, Is Virtual User: 0
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module MagicLeapAR (282)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module AugmentedReality (281)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module GameplayTagsEditor (278)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module FacialAnimationEditor (276)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module FacialAnimation (274)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module DataValidation (272)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module AssetManagerEditor (270)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module LevelEditor (269)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module PixelInspectorModule (268)
[2019.09.24-20.52.43:225][588]LogModuleManager: Shutting down and abandoning module CommonMenuExtensions (266)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module MainFrame (264)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module HotReload (263)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module ContentBrowser (259)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module TreeMap (257)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module AnimationSharing (254)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module LightPropagationVolumeRuntime (252)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module Paper2D (250)
[2019.09.24-20.52.43:226][588]LogModuleManager: Shutting down and abandoning module WindowsMoviePlayer (248)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module WebMMoviePlayer (246)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module NetworkReplayStreaming (244)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module PacketHandler (242)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module ClothingSystemEditor (240)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module ClothingSystemRuntime (238)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module MediaAssets (236)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module Overlay (234)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module OverlayEditor (233)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module VREditor (230)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module StringTableEditor (228)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module GameplayTasksEditor (226)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module BehaviorTreeEditor (224)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module FunctionalTesting (222)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module CollisionAnalyzer (220)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module WorkspaceMenuStructure (219)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module UMG (216)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module UMGEditor (215)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module Sequencer (214)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module MessageLog (211)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module SlateReflector (206)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module Slate (204)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module LandscapeEditorUtilities (202)
[2019.09.24-20.52.43:227][588]LogModuleManager: Shutting down and abandoning module EditorStyle (200)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module UnrealEd (198)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module MRMesh (196)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module SourceCodeAccess (194)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module HeadMountedDisplay (192)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module XAudio2 (190)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module Networking (188)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module Core (186)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module KismetCompiler (184)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module MeshUtilities (182)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module MeshMergeUtilities (181)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module MeshReductionInterface (180)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module SkeletalMeshReduction (179)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module ProxyLODMeshReduction (177)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module QuadricMeshReduction (175)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module MaterialBaking (171)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module NullInstallBundleManager (166)
[2019.09.24-20.52.43:228][588]LogModuleManager: Shutting down and abandoning module DerivedDataCache (164)
[2019.09.24-20.52.43:245][588]LogDerivedDataCache: Shutdown
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module XGEController (162)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module TargetPlatform (160)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module VulkanShaderFormat (159)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module ShaderFormatVectorVM (157)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module ShaderFormatOpenGL (155)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module ShaderFormatD3D (153)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module MetalShaderFormat (151)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module TextureFormatUncompressed (149)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module TextureFormatPVR (147)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module TextureFormatDXT (145)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module TextureFormatIntelISPCTexComp (143)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module TextureFormatASTC (141)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module ImageWrapper (140)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module TextureFormatAndroid (137)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module AudioFormatOpus (135)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module AudioFormatOgg (133)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module AudioFormatADPCM (131)
[2019.09.24-20.52.43:245][588]LogModuleManager: Shutting down and abandoning module LuminTargetPlatform (129)
[2019.09.24-20.52.43:246][588]LogModuleManager: Shutting down and abandoning module LinuxTargetPlatform (127)
[2019.09.24-20.52.43:246][588]LogModuleManager: Shutting down and abandoning module LinuxServerTargetPlatform (125)
[2019.09.24-20.52.43:246][588]LogModuleManager: Shutting down and abandoning module LinuxNoEditorTargetPlatform (123)
[2019.09.24-20.52.43:246][588]LogModuleManager: Shutting down and abandoning module LinuxClientTargetPlatform (121)
[2019.09.24-20.52.43:246][588]LogModuleManager: Shutting down and abandoning module TVOSTargetPlatform (119)
[2019.09.24-20.52.43:247][588]LogModuleManager: Shutting down and abandoning module Messaging (117)
[2019.09.24-20.52.43:247][588]LogModuleManager: Shutting down and abandoning module IOSTargetPlatform (115)
[2019.09.24-20.52.43:247][588]LogModuleManager: Shutting down and abandoning module HTML5TargetPlatform (113)
[2019.09.24-20.52.43:247][588]LogModuleManager: Shutting down and abandoning module AndroidTargetPlatform (111)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module WindowsTargetPlatform (109)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module WindowsServerTargetPlatform (107)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module WindowsNoEditorTargetPlatform (105)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module WindowsClientTargetPlatform (103)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module MacTargetPlatform (101)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module MacServerTargetPlatform (99)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module MacNoEditorTargetPlatform (97)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module MacClientTargetPlatform (95)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module AllDesktopTargetPlatform (93)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module InputCore (90)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module Settings (88)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module DirectoryWatcher (86)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module PhysXCooking (84)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module WindowsPlatformFeatures (82)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module GameplayMediaEncoder (81)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module SteamVR (78)
[2019.09.24-20.52.43:251][588]LogHMD: Freeing OpenVRDLLHandle.
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module OculusHMD (76)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module ExampleDeviceProfileSelector (74)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module LauncherChunkInstaller (72)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module OnlineBlueprintSupport (70)
[2019.09.24-20.52.43:251][588]LogModuleManager: Shutting down and abandoning module OnlineSubsystem (66)
[2019.09.24-20.52.43:252][588]LogModuleManager: Shutting down and abandoning module XMPP (61)
[2019.09.24-20.52.43:252][588]LogModuleManager: Shutting down and abandoning module WebSockets (60)
[2019.09.24-20.52.43:276][588]LogModuleManager: Shutting down and abandoning module HTTP (57)
[2019.09.24-20.52.43:276][588]LogHttp: Display: Http module shutting down, but needs to wait on 1 outstanding Http requests:
[2019.09.24-20.52.43:276][588]LogHttp: Display: 	verb=[POST] url=[https://datarouter.ol.epicgames.com/datarouter/api/v1/public/data?SessionID=%7B2274AE60-4DCE-AE6D-8030-24948B9F6EDE%7D&AppID=UEEditor.Rocket.Release&AppVersion=4.23.0-8386587%2B%2B%2BUE4%2BRelease-4.23&UserID=46d13a6741ca9bd6998950bfb3e409e5%7C894d73b3c48046cb86ff7e4e99bb4209%7C3520fb30-bffa-487f-84af-b0ae783e2152&AppEnvironment=datacollector-binary&UploadType=eteventstream] status=Processing
[2019.09.24-20.52.43:297][588]LogModuleManager: Shutting down and abandoning module SSL (56)
[2019.09.24-20.52.43:298][588]LogModuleManager: Shutting down and abandoning module WmfMedia (52)
[2019.09.24-20.52.43:299][588]LogModuleManager: Shutting down and abandoning module Media (51)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module MagicLeap (48)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module DatasmithContent (46)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module AISupportModule (44)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module PlatformCryptoOpenSSL (42)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module PlatformCrypto (40)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module AnimationModifiers (38)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module PropertyEditor (37)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module AudioEditor (34)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module TextureCompressor (32)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module RenderCore (30)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module Landscape (28)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module SlateRHIRenderer (26)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module OpenGLDrv (24)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module D3D11RHI (22)
[2019.09.24-20.52.43:300][588]LogModuleManager: Shutting down and abandoning module AnimGraphRuntime (20)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module Renderer (18)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module Engine (16)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module CoreUObject (14)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module NetworkFile (12)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module CookedIterativeFile (10)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module StreamingFile (8)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module SandboxFile (6)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module PakFile (4)
[2019.09.24-20.52.43:301][588]LogModuleManager: Shutting down and abandoning module RSA (3)
[2019.09.24-20.52.43:301][588]LogD3D11RHI: Shutdown
[2019.09.24-20.52.43:301][588]LogD3D11RHI: CleanupD3DDevice
[2019.09.24-20.52.43:302][588]LogRendererCore: FGlobalDynamicReadBuffer::Cleanup()
[2019.09.24-20.52.43:302][588]LogRendererCore: FGlobalDynamicReadBuffer::Cleanup()
[2019.09.24-20.52.43:302][588]LogRendererCore: FGlobalDynamicReadBuffer::Cleanup()
[2019.09.24-20.52.43:371][588]LogD3D11RHI: ~FD3D11DynamicRHI
[2019.09.24-20.52.43:384][588]LogExit: Exiting.
[2019.09.24-20.52.43:387][588]Log file closed, 09/24/19 13:52:43
